{"ast":null,"code":"import _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PostgrestQueryBuilder } from '@supabase/postgrest-js';\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient';\nexport var SupabaseQueryBuilder = /*#__PURE__*/function (_PostgrestQueryBuilde) {\n  _inherits(SupabaseQueryBuilder, _PostgrestQueryBuilde);\n  var _super = _createSuper(SupabaseQueryBuilder);\n  function SupabaseQueryBuilder(url, _ref) {\n    var _this;\n    var _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      schema = _ref.schema,\n      realtime = _ref.realtime,\n      table = _ref.table,\n      fetch = _ref.fetch,\n      shouldThrowOnError = _ref.shouldThrowOnError;\n    _classCallCheck(this, SupabaseQueryBuilder);\n    _this = _super.call(this, url, {\n      headers: headers,\n      schema: schema,\n      fetch: fetch,\n      shouldThrowOnError: shouldThrowOnError\n    });\n    _this._subscription = null;\n    _this._realtime = realtime;\n    _this._headers = headers;\n    _this._schema = schema;\n    _this._table = table;\n    return _this;\n  }\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  _createClass(SupabaseQueryBuilder, [{\n    key: \"on\",\n    value: function on(event, callback) {\n      if (!this._realtime.isConnected()) {\n        this._realtime.connect();\n      }\n      if (!this._subscription) {\n        this._subscription = new SupabaseRealtimeClient(this._realtime, this._headers, this._schema, this._table);\n      }\n      return this._subscription.on(event, callback);\n    }\n  }]);\n  return SupabaseQueryBuilder;\n}(PostgrestQueryBuilder);","map":{"version":3,"names":["PostgrestQueryBuilder","SupabaseRealtimeClient","SupabaseQueryBuilder","_PostgrestQueryBuilde","_inherits","_super","_createSuper","url","_ref","_this","_ref$headers","headers","schema","realtime","table","fetch","shouldThrowOnError","_classCallCheck","call","_subscription","_realtime","_headers","_schema","_table","_createClass","key","value","on","event","callback","isConnected","connect"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/supabase-js/src/lib/SupabaseQueryBuilder.ts"],"sourcesContent":["import { PostgrestQueryBuilder } from '@supabase/postgrest-js'\nimport { SupabaseRealtimeClient } from './SupabaseRealtimeClient'\nimport { RealtimeClient } from '@supabase/realtime-js'\nimport { Fetch, GenericObject, SupabaseEventTypes, SupabaseRealtimePayload } from './types'\n\nexport class SupabaseQueryBuilder<T> extends PostgrestQueryBuilder<T> {\n  private _subscription: SupabaseRealtimeClient | null = null\n  private _realtime: RealtimeClient\n  private _headers: GenericObject\n  private _schema: string\n  private _table: string\n\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      realtime,\n      table,\n      fetch,\n      shouldThrowOnError,\n    }: {\n      headers?: GenericObject\n      schema: string\n      realtime: RealtimeClient\n      table: string\n      fetch?: Fetch\n      shouldThrowOnError?: boolean\n    }\n  ) {\n    super(url, { headers, schema, fetch, shouldThrowOnError })\n\n    this._realtime = realtime\n    this._headers = headers\n    this._schema = schema\n    this._table = table\n  }\n\n  /**\n   * Subscribe to realtime changes in your database.\n   * @param event The database event which you would like to receive updates for, or you can use the special wildcard `*` to listen to all changes.\n   * @param callback A callback that will handle the payload that is sent whenever your database changes.\n   */\n  on(\n    event: SupabaseEventTypes,\n    callback: (payload: SupabaseRealtimePayload<T>) => void\n  ): SupabaseRealtimeClient {\n    if (!this._realtime.isConnected()) {\n      this._realtime.connect()\n    }\n    if (!this._subscription) {\n      this._subscription = new SupabaseRealtimeClient(\n        this._realtime,\n        this._headers,\n        this._schema,\n        this._table\n      )\n    }\n    return this._subscription.on(event, callback)\n  }\n}\n"],"mappings":";;;;AAAA,SAASA,qBAAqB,QAAQ,wBAAwB;AAC9D,SAASC,sBAAsB,QAAQ,0BAA0B;AAIjE,WAAaC,oBAAwB,0BAAAC,qBAAA;EAAAC,SAAA,CAAAF,oBAAA,EAAAC,qBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,oBAAA;EAOnC,SAAAA,qBACEK,GAAW,EAAAC,IAAA,EAeV;IAAA,IAAAC,KAAA;IAAA,IAAAC,YAAA,GAAAF,IAAA,CAbCG,OAAO;MAAPA,OAAO,GAAAD,YAAA,cAAG,EAAE,GAAAA,YAAA;MACZE,MAAM,GAAAJ,IAAA,CAANI,MAAM;MACNC,QAAQ,GAAAL,IAAA,CAARK,QAAQ;MACRC,KAAK,GAAAN,IAAA,CAALM,KAAK;MACLC,KAAK,GAAAP,IAAA,CAALO,KAAK;MACLC,kBAAkB,GAAAR,IAAA,CAAlBQ,kBAAkB;IAAAC,eAAA,OAAAf,oBAAA;IAUpBO,KAAA,GAAAJ,MAAA,CAAAa,IAAA,OAAMX,GAAG,EAAE;MAAEI,OAAO,EAAPA,OAAO;MAAEC,MAAM,EAANA,MAAM;MAAEG,KAAK,EAALA,KAAK;MAAEC,kBAAkB,EAAlBA;IAAkB,CAAE;IAxBnDP,KAAA,CAAAU,aAAa,GAAkC,IAAI;IA0BzDV,KAAA,CAAKW,SAAS,GAAGP,QAAQ;IACzBJ,KAAA,CAAKY,QAAQ,GAAGV,OAAO;IACvBF,KAAA,CAAKa,OAAO,GAAGV,MAAM;IACrBH,KAAA,CAAKc,MAAM,GAAGT,KAAK;IAAA,OAAAL,KAAA;EACrB;EAEA;;;;;EAAAe,YAAA,CAAAtB,oBAAA;IAAAuB,GAAA;IAAAC,KAAA,EAKA,SAAAC,GACEC,KAAyB,EACzBC,QAAuD;MAEvD,IAAI,CAAC,IAAI,CAACT,SAAS,CAACU,WAAW,EAAE,EAAE;QACjC,IAAI,CAACV,SAAS,CAACW,OAAO,EAAE;;MAE1B,IAAI,CAAC,IAAI,CAACZ,aAAa,EAAE;QACvB,IAAI,CAACA,aAAa,GAAG,IAAIlB,sBAAsB,CAC7C,IAAI,CAACmB,SAAS,EACd,IAAI,CAACC,QAAQ,EACb,IAAI,CAACC,OAAO,EACZ,IAAI,CAACC,MAAM,CACZ;;MAEH,OAAO,IAAI,CAACJ,aAAa,CAACQ,EAAE,CAACC,KAAK,EAAEC,QAAQ,CAAC;IAC/C;EAAC;EAAA,OAAA3B,oBAAA;AAAA,EAtD0CF,qBAAwB"},"metadata":{},"sourceType":"module"}