{"ast":null,"code":"import _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport { PostgrestBuilder } from './types';\n/**\n * Post-filters (transforms)\n */\nvar PostgrestTransformBuilder = /*#__PURE__*/function (_PostgrestBuilder) {\n  _inherits(PostgrestTransformBuilder, _PostgrestBuilder);\n  var _super = _createSuper(PostgrestTransformBuilder);\n  function PostgrestTransformBuilder() {\n    _classCallCheck(this, PostgrestTransformBuilder);\n    return _super.apply(this, arguments);\n  }\n  _createClass(PostgrestTransformBuilder, [{\n    key: \"select\",\n    value:\n    /**\n     * Performs vertical filtering with SELECT.\n     *\n     * @param columns  The columns to retrieve, separated by commas.\n     */\n    function select() {\n      var columns = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '*';\n      // Remove whitespaces except when quoted\n      var quoted = false;\n      var cleanedColumns = columns.split('').map(function (c) {\n        if (/\\s/.test(c) && !quoted) {\n          return '';\n        }\n        if (c === '\"') {\n          quoted = !quoted;\n        }\n        return c;\n      }).join('');\n      this.url.searchParams.set('select', cleanedColumns);\n      return this;\n    }\n    /**\n     * Orders the result with the specified `column`.\n     *\n     * @param column  The column to order on.\n     * @param ascending  If `true`, the result will be in ascending order.\n     * @param nullsFirst  If `true`, `null`s appear first.\n     * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n     */\n  }, {\n    key: \"order\",\n    value: function order(column) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$ascending = _ref.ascending,\n        ascending = _ref$ascending === void 0 ? true : _ref$ascending,\n        _ref$nullsFirst = _ref.nullsFirst,\n        nullsFirst = _ref$nullsFirst === void 0 ? false : _ref$nullsFirst,\n        foreignTable = _ref.foreignTable;\n      var key = typeof foreignTable === 'undefined' ? 'order' : \"\".concat(foreignTable, \".order\");\n      var existingOrder = this.url.searchParams.get(key);\n      this.url.searchParams.set(key, \"\".concat(existingOrder ? \"\".concat(existingOrder, \",\") : '').concat(column, \".\").concat(ascending ? 'asc' : 'desc', \".\").concat(nullsFirst ? 'nullsfirst' : 'nullslast'));\n      return this;\n    }\n    /**\n     * Limits the result with the specified `count`.\n     *\n     * @param count  The maximum no. of rows to limit to.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n  }, {\n    key: \"limit\",\n    value: function limit(count) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        foreignTable = _ref2.foreignTable;\n      var key = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(key, \"\".concat(count));\n      return this;\n    }\n    /**\n     * Limits the result to rows within the specified range, inclusive.\n     *\n     * @param from  The starting index from which to limit the result, inclusive.\n     * @param to  The last index to which to limit the result, inclusive.\n     * @param foreignTable  The foreign table to use (for foreign columns).\n     */\n  }, {\n    key: \"range\",\n    value: function range(from, to) {\n      var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        foreignTable = _ref3.foreignTable;\n      var keyOffset = typeof foreignTable === 'undefined' ? 'offset' : \"\".concat(foreignTable, \".offset\");\n      var keyLimit = typeof foreignTable === 'undefined' ? 'limit' : \"\".concat(foreignTable, \".limit\");\n      this.url.searchParams.set(keyOffset, \"\".concat(from));\n      // Range is inclusive, so add 1\n      this.url.searchParams.set(keyLimit, \"\".concat(to - from + 1));\n      return this;\n    }\n    /**\n     * Sets the AbortSignal for the fetch request.\n     */\n  }, {\n    key: \"abortSignal\",\n    value: function abortSignal(signal) {\n      this.signal = signal;\n      return this;\n    }\n    /**\n     * Retrieves only one row from the result. Result must be one row (e.g. using\n     * `limit`), otherwise this will result in an error.\n     */\n  }, {\n    key: \"single\",\n    value: function single() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      return this;\n    }\n    /**\n     * Retrieves at most one row from the result. Result must be at most one row\n     * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n     * error.\n     */\n  }, {\n    key: \"maybeSingle\",\n    value: function maybeSingle() {\n      this.headers['Accept'] = 'application/vnd.pgrst.object+json';\n      this.allowEmpty = true;\n      return this;\n    }\n    /**\n     * Set the response type to CSV.\n     */\n  }, {\n    key: \"csv\",\n    value: function csv() {\n      this.headers['Accept'] = 'text/csv';\n      return this;\n    }\n  }]);\n  return PostgrestTransformBuilder;\n}(PostgrestBuilder);\nexport { PostgrestTransformBuilder as default };","map":{"version":3,"names":["PostgrestBuilder","PostgrestTransformBuilder","_PostgrestBuilder","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","select","columns","length","undefined","quoted","cleanedColumns","split","map","c","test","join","url","searchParams","set","order","column","_ref","_ref$ascending","ascending","_ref$nullsFirst","nullsFirst","foreignTable","concat","existingOrder","get","limit","count","_ref2","range","from","to","_ref3","keyOffset","keyLimit","abortSignal","signal","single","headers","maybeSingle","allowEmpty","csv","default"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/postgrest-js/src/lib/PostgrestTransformBuilder.ts"],"sourcesContent":["import { PostgrestBuilder, PostgrestMaybeSingleResponse, PostgrestSingleResponse } from './types'\n\n/**\n * Post-filters (transforms)\n */\n\nexport default class PostgrestTransformBuilder<T> extends PostgrestBuilder<T> {\n  /**\n   * Performs vertical filtering with SELECT.\n   *\n   * @param columns  The columns to retrieve, separated by commas.\n   */\n  select(columns = '*'): this {\n    // Remove whitespaces except when quoted\n    let quoted = false\n    const cleanedColumns = columns\n      .split('')\n      .map((c) => {\n        if (/\\s/.test(c) && !quoted) {\n          return ''\n        }\n        if (c === '\"') {\n          quoted = !quoted\n        }\n        return c\n      })\n      .join('')\n    this.url.searchParams.set('select', cleanedColumns)\n    return this\n  }\n\n  /**\n   * Orders the result with the specified `column`.\n   *\n   * @param column  The column to order on.\n   * @param ascending  If `true`, the result will be in ascending order.\n   * @param nullsFirst  If `true`, `null`s appear first.\n   * @param foreignTable  The foreign table to use (if `column` is a foreign column).\n   */\n  order(\n    column: keyof T,\n    {\n      ascending = true,\n      nullsFirst = false,\n      foreignTable,\n    }: { ascending?: boolean; nullsFirst?: boolean; foreignTable?: string } = {}\n  ): this {\n    const key = typeof foreignTable === 'undefined' ? 'order' : `${foreignTable}.order`\n    const existingOrder = this.url.searchParams.get(key)\n\n    this.url.searchParams.set(\n      key,\n      `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}.${\n        nullsFirst ? 'nullsfirst' : 'nullslast'\n      }`\n    )\n    return this\n  }\n\n  /**\n   * Limits the result with the specified `count`.\n   *\n   * @param count  The maximum no. of rows to limit to.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  limit(count: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const key = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(key, `${count}`)\n    return this\n  }\n\n  /**\n   * Limits the result to rows within the specified range, inclusive.\n   *\n   * @param from  The starting index from which to limit the result, inclusive.\n   * @param to  The last index to which to limit the result, inclusive.\n   * @param foreignTable  The foreign table to use (for foreign columns).\n   */\n  range(from: number, to: number, { foreignTable }: { foreignTable?: string } = {}): this {\n    const keyOffset = typeof foreignTable === 'undefined' ? 'offset' : `${foreignTable}.offset`\n    const keyLimit = typeof foreignTable === 'undefined' ? 'limit' : `${foreignTable}.limit`\n    this.url.searchParams.set(keyOffset, `${from}`)\n    // Range is inclusive, so add 1\n    this.url.searchParams.set(keyLimit, `${to - from + 1}`)\n    return this\n  }\n\n  /**\n   * Sets the AbortSignal for the fetch request.\n   */\n  abortSignal(signal: AbortSignal): this {\n    this.signal = signal\n    return this\n  }\n\n  /**\n   * Retrieves only one row from the result. Result must be one row (e.g. using\n   * `limit`), otherwise this will result in an error.\n   */\n  single(): PromiseLike<PostgrestSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    return this as PromiseLike<PostgrestSingleResponse<T>>\n  }\n\n  /**\n   * Retrieves at most one row from the result. Result must be at most one row\n   * (e.g. using `eq` on a UNIQUE column), otherwise this will result in an\n   * error.\n   */\n  maybeSingle(): PromiseLike<PostgrestMaybeSingleResponse<T>> {\n    this.headers['Accept'] = 'application/vnd.pgrst.object+json'\n    this.allowEmpty = true\n    return this as PromiseLike<PostgrestMaybeSingleResponse<T>>\n  }\n\n  /**\n   * Set the response type to CSV.\n   */\n  csv(): PromiseLike<PostgrestSingleResponse<string>> {\n    this.headers['Accept'] = 'text/csv'\n    return this as PromiseLike<PostgrestSingleResponse<string>>\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}