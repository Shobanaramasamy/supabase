{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants';\nimport { stripTrailingSlash, isBrowser } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder';\nimport { SupabaseStorageClient } from '@supabase/storage-js';\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nvar DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS\n};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n    var settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    this.restUrl = \"\".concat(_supabaseUrl, \"/rest/v1\");\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace('http', 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n    var isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n    if (isPlatform) {\n      var urlParts = _supabaseUrl.split('.');\n      this.functionsUrl = \"\".concat(urlParts[0], \".functions.\").concat(urlParts[1], \".\").concat(urlParts[2]);\n    } else {\n      this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    }\n    this.schema = settings.schema;\n    this.multiTab = settings.multiTab;\n    this.fetch = settings.fetch;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), options === null || options === void 0 ? void 0 : options.headers);\n    this.shouldThrowOnError = settings.shouldThrowOnError || false;\n    this.auth = this._initSupabaseAuthClient(settings);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this._listenForAuthEvents();\n    this._listenForMultiTabEvents();\n    // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this._getAuthHeaders(),\n        customFetch: this.fetch\n      });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch);\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table The table name to operate on.\n     */\n  }, {\n    key: \"from\",\n    value: function from(table) {\n      var url = \"\".concat(this.restUrl, \"/\").concat(table);\n      return new SupabaseQueryBuilder(url, {\n        headers: this._getAuthHeaders(),\n        schema: this.schema,\n        realtime: this.realtime,\n        table: table,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head   When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     *\n     */\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn, params) {\n      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref$head = _ref.head,\n        head = _ref$head === void 0 ? false : _ref$head,\n        _ref$count = _ref.count,\n        count = _ref$count === void 0 ? null : _ref$count;\n      var rest = this._initPostgRESTClient();\n      return rest.rpc(fn, params, {\n        head: head,\n        count: count\n      });\n    }\n    /**\n     * Closes and removes all subscriptions and returns a list of removed\n     * subscriptions and their errors.\n     */\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this = this;\n        var allSubs, allSubPromises, allRemovedSubs;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                allSubs = this.getSubscriptions().slice();\n                allSubPromises = allSubs.map(function (sub) {\n                  return _this.removeSubscription(sub);\n                });\n                _context.next = 4;\n                return Promise.all(allSubPromises);\n              case 4:\n                allRemovedSubs = _context.sent;\n                return _context.abrupt(\"return\", allRemovedSubs.map(function (_ref2, i) {\n                  var error = _ref2.error;\n                  return {\n                    data: {\n                      subscription: allSubs[i]\n                    },\n                    error: error\n                  };\n                }));\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Closes and removes a subscription and returns the number of open subscriptions.\n     *\n     * @param subscription The subscription you want to close and remove.\n     */\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _yield$this$_closeSub, error, allSubs, openSubCount;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this._closeSubscription(subscription);\n              case 2:\n                _yield$this$_closeSub = _context2.sent;\n                error = _yield$this$_closeSub.error;\n                allSubs = this.getSubscriptions();\n                openSubCount = allSubs.filter(function (chan) {\n                  return chan.isJoined();\n                }).length;\n                if (!(allSubs.length === 0)) {\n                  _context2.next = 9;\n                  break;\n                }\n                _context2.next = 9;\n                return this.realtime.disconnect();\n              case 9:\n                return _context2.abrupt(\"return\", {\n                  data: {\n                    openSubscriptions: openSubCount\n                  },\n                  error: error\n                });\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_closeSubscription\",\n    value: function _closeSubscription(subscription) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var error, _yield$this$_unsubscr, unsubError;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                error = null;\n                if (subscription.isClosed()) {\n                  _context3.next = 7;\n                  break;\n                }\n                _context3.next = 4;\n                return this._unsubscribeSubscription(subscription);\n              case 4:\n                _yield$this$_unsubscr = _context3.sent;\n                unsubError = _yield$this$_unsubscr.error;\n                error = unsubError;\n              case 7:\n                this.realtime.remove(subscription);\n                return _context3.abrupt(\"return\", {\n                  error: error\n                });\n              case 9:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }, {\n    key: \"_unsubscribeSubscription\",\n    value: function _unsubscribeSubscription(subscription) {\n      return new Promise(function (resolve) {\n        subscription.unsubscribe().receive('ok', function () {\n          return resolve({\n            error: null\n          });\n        }).receive('error', function (error) {\n          return resolve({\n            error: error\n          });\n        }).receive('timeout', function () {\n          return resolve({\n            error: new Error('timed out')\n          });\n        });\n      });\n    }\n    /**\n     * Returns an array of all your subscriptions.\n     */\n  }, {\n    key: \"getSubscriptions\",\n    value: function getSubscriptions() {\n      return this.realtime.channels;\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref3) {\n      var autoRefreshToken = _ref3.autoRefreshToken,\n        persistSession = _ref3.persistSession,\n        detectSessionInUrl = _ref3.detectSessionInUrl,\n        localStorage = _ref3.localStorage,\n        headers = _ref3.headers,\n        fetch = _ref3.fetch,\n        cookieOptions = _ref3.cookieOptions,\n        multiTab = _ref3.multiTab;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, headers), authHeaders),\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        localStorage: localStorage,\n        fetch: fetch,\n        cookieOptions: cookieOptions,\n        multiTab: multiTab\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.params), {\n          apikey: this.supabaseKey\n        })\n      }));\n    }\n  }, {\n    key: \"_initPostgRESTClient\",\n    value: function _initPostgRESTClient() {\n      return new PostgrestClient(this.restUrl, {\n        headers: this._getAuthHeaders(),\n        schema: this.schema,\n        fetch: this.fetch,\n        throwOnError: this.shouldThrowOnError\n      });\n    }\n  }, {\n    key: \"_getAuthHeaders\",\n    value: function _getAuthHeaders() {\n      var _a, _b;\n      var headers = Object.assign({}, this.headers);\n      var authBearer = (_b = (_a = this.auth.session()) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\n      headers['apikey'] = this.supabaseKey;\n      headers['Authorization'] = headers['Authorization'] || \"Bearer \".concat(authBearer);\n      return headers;\n    }\n  }, {\n    key: \"_listenForMultiTabEvents\",\n    value: function _listenForMultiTabEvents() {\n      var _this2 = this;\n      if (!this.multiTab || !isBrowser() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\n        return null;\n      }\n      try {\n        return window === null || window === void 0 ? void 0 : window.addEventListener('storage', function (e) {\n          var _a, _b, _c;\n          if (e.key === STORAGE_KEY) {\n            var newSession = JSON.parse(String(e.newValue));\n            var accessToken = (_b = (_a = newSession === null || newSession === void 0 ? void 0 : newSession.currentSession) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined;\n            var previousAccessToken = (_c = _this2.auth.session()) === null || _c === void 0 ? void 0 : _c.access_token;\n            if (!accessToken) {\n              _this2._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE');\n            } else if (!previousAccessToken && accessToken) {\n              _this2._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE');\n            } else if (previousAccessToken !== accessToken) {\n              _this2._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE');\n            }\n          }\n        });\n      } catch (error) {\n        console.error('_listenForMultiTabEvents', error);\n        return null;\n      }\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this3 = this;\n      var _this$auth$onAuthStat = this.auth.onAuthStateChange(function (event, session) {\n          _this3._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n        }),\n        data = _this$auth$onAuthStat.data;\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, token, source) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token);\n        // Ideally we should call this.auth.recoverSession() - need to make public\n        // to trigger a \"SIGNED_IN\" event on this client.\n        if (source == 'STORAGE') this.auth.setAuth(token);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n      }\n    }\n  }]);\n  return SupabaseClient;\n}();\nexport { SupabaseClient as default };","map":{"version":3,"names":["DEFAULT_HEADERS","STORAGE_KEY","stripTrailingSlash","isBrowser","SupabaseAuthClient","SupabaseQueryBuilder","SupabaseStorageClient","FunctionsClient","PostgrestClient","RealtimeClient","DEFAULT_OPTIONS","schema","autoRefreshToken","persistSession","detectSessionInUrl","multiTab","headers","SupabaseClient","supabaseUrl","supabaseKey","options","_classCallCheck","Error","_supabaseUrl","settings","Object","assign","restUrl","concat","realtimeUrl","replace","authUrl","storageUrl","isPlatform","match","urlParts","split","functionsUrl","fetch","shouldThrowOnError","auth","_initSupabaseAuthClient","realtime","_initRealtimeClient","_listenForAuthEvents","_listenForMultiTabEvents","_createClass","key","get","_getAuthHeaders","customFetch","value","from","table","url","rpc","fn","params","_ref","arguments","length","undefined","_ref$head","head","_ref$count","count","rest","_initPostgRESTClient","removeAllSubscriptions","allSubs","getSubscriptions","slice","allSubPromises","map","sub","_this","removeSubscription","_context","next","Promise","all","allRemovedSubs","sent","abrupt","_ref2","i","error","data","subscription","stop","_callee","_closeSubscription","_yield$this$_closeSub","_context2","openSubCount","filter","chan","isJoined","disconnect","openSubscriptions","_callee2","isClosed","_context3","_unsubscribeSubscription","_yield$this$_unsubscr","unsubError","remove","_callee3","resolve","unsubscribe","receive","channels","_ref3","localStorage","cookieOptions","authHeaders","Authorization","apikey","throwOnError","authBearer","_b","_a","session","access_token","_this2","window","addEventListener","e","newSession","JSON","parse","String","newValue","accessToken","currentSession","previousAccessToken","_c","_handleTokenChanged","console","_this3","_this$auth$onAuthStat","onAuthStateChange","event","token","source","changedAccessToken","setAuth","signOut","default"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/supabase-js/src/SupabaseClient.ts"],"sourcesContent":["import { DEFAULT_HEADERS, STORAGE_KEY } from './lib/constants'\nimport { stripTrailingSlash, isBrowser } from './lib/helpers'\nimport { Fetch, GenericObject, SupabaseClientOptions } from './lib/types'\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient'\nimport { SupabaseQueryBuilder } from './lib/SupabaseQueryBuilder'\nimport { SupabaseStorageClient } from '@supabase/storage-js'\nimport { FunctionsClient } from '@supabase/functions-js'\nimport { PostgrestClient } from '@supabase/postgrest-js'\nimport { AuthChangeEvent } from '@supabase/gotrue-js'\nimport { RealtimeClient, RealtimeSubscription, RealtimeClientOptions } from '@supabase/realtime-js'\n\nconst DEFAULT_OPTIONS = {\n  schema: 'public',\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  multiTab: true,\n  headers: DEFAULT_HEADERS,\n}\n\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n  /**\n   * Supabase Auth allows you to create and manage user sessions for access to data that is secured by access policies.\n   */\n  auth: SupabaseAuthClient\n\n  protected schema: string\n  protected restUrl: string\n  protected realtimeUrl: string\n  protected authUrl: string\n  protected storageUrl: string\n  protected functionsUrl: string\n  protected realtime: RealtimeClient\n  protected multiTab: boolean\n  protected fetch?: Fetch\n  protected changedAccessToken: string | undefined\n  protected shouldThrowOnError: boolean\n\n  protected headers: {\n    [key: string]: string\n  }\n\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.headers Any additional headers to send with each network request.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.multiTab Set to \"false\" if you want to disable multi-tab/window events.\n   * @param options.fetch A custom fetch implementation.\n   */\n  constructor(\n    protected supabaseUrl: string,\n    protected supabaseKey: string,\n    options?: SupabaseClientOptions\n  ) {\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.')\n    if (!supabaseKey) throw new Error('supabaseKey is required.')\n\n    const _supabaseUrl = stripTrailingSlash(supabaseUrl)\n    const settings = { ...DEFAULT_OPTIONS, ...options }\n\n    this.restUrl = `${_supabaseUrl}/rest/v1`\n    this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace('http', 'ws')\n    this.authUrl = `${_supabaseUrl}/auth/v1`\n    this.storageUrl = `${_supabaseUrl}/storage/v1`\n\n    const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/)\n    if (isPlatform) {\n      const urlParts = _supabaseUrl.split('.')\n      this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`\n    } else {\n      this.functionsUrl = `${_supabaseUrl}/functions/v1`\n    }\n\n    this.schema = settings.schema\n    this.multiTab = settings.multiTab\n    this.fetch = settings.fetch\n    this.headers = { ...DEFAULT_HEADERS, ...options?.headers }\n    this.shouldThrowOnError = settings.shouldThrowOnError || false\n\n    this.auth = this._initSupabaseAuthClient(settings)\n    this.realtime = this._initRealtimeClient({ headers: this.headers, ...settings.realtime })\n\n    this._listenForAuthEvents()\n    this._listenForMultiTabEvents()\n\n    // In the future we might allow the user to pass in a logger to receive these events.\n    // this.realtime.onOpen(() => console.log('OPEN'))\n    // this.realtime.onClose(() => console.log('CLOSED'))\n    // this.realtime.onError((e: Error) => console.log('Socket error', e))\n  }\n\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  get functions() {\n    return new FunctionsClient(this.functionsUrl, {\n      headers: this._getAuthHeaders(),\n      customFetch: this.fetch,\n    })\n  }\n\n  /**\n   * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n   */\n  get storage() {\n    return new SupabaseStorageClient(this.storageUrl, this._getAuthHeaders(), this.fetch)\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table The table name to operate on.\n   */\n  from<T = any>(table: string): SupabaseQueryBuilder<T> {\n    const url = `${this.restUrl}/${table}`\n    return new SupabaseQueryBuilder<T>(url, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      realtime: this.realtime,\n      table,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head   When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   *\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: { head?: boolean; count?: null | 'exact' | 'planned' | 'estimated' } = {}\n  ) {\n    const rest = this._initPostgRESTClient()\n    return rest.rpc<T>(fn, params, { head, count })\n  }\n\n  /**\n   * Closes and removes all subscriptions and returns a list of removed\n   * subscriptions and their errors.\n   */\n  async removeAllSubscriptions(): Promise<\n    { data: { subscription: RealtimeSubscription }; error: Error | null }[]\n  > {\n    const allSubs: RealtimeSubscription[] = this.getSubscriptions().slice()\n    const allSubPromises = allSubs.map((sub) => this.removeSubscription(sub))\n    const allRemovedSubs = await Promise.all(allSubPromises)\n\n    return allRemovedSubs.map(({ error }, i) => {\n      return {\n        data: { subscription: allSubs[i] },\n        error,\n      }\n    })\n  }\n\n  /**\n   * Closes and removes a subscription and returns the number of open subscriptions.\n   *\n   * @param subscription The subscription you want to close and remove.\n   */\n  async removeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ data: { openSubscriptions: number }; error: Error | null }> {\n    const { error } = await this._closeSubscription(subscription)\n    const allSubs: RealtimeSubscription[] = this.getSubscriptions()\n    const openSubCount = allSubs.filter((chan) => chan.isJoined()).length\n\n    if (allSubs.length === 0) await this.realtime.disconnect()\n\n    return { data: { openSubscriptions: openSubCount }, error }\n  }\n\n  private async _closeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: Error | null }> {\n    let error = null\n\n    if (!subscription.isClosed()) {\n      const { error: unsubError } = await this._unsubscribeSubscription(subscription)\n      error = unsubError\n    }\n\n    this.realtime.remove(subscription)\n\n    return { error }\n  }\n\n  private _unsubscribeSubscription(\n    subscription: RealtimeSubscription\n  ): Promise<{ error: Error | null }> {\n    return new Promise((resolve) => {\n      subscription\n        .unsubscribe()\n        .receive('ok', () => resolve({ error: null }))\n        .receive('error', (error: Error) => resolve({ error }))\n        .receive('timeout', () => resolve({ error: new Error('timed out') }))\n    })\n  }\n\n  /**\n   * Returns an array of all your subscriptions.\n   */\n  getSubscriptions(): RealtimeSubscription[] {\n    return this.realtime.channels as RealtimeSubscription[]\n  }\n\n  private _initSupabaseAuthClient({\n    autoRefreshToken,\n    persistSession,\n    detectSessionInUrl,\n    localStorage,\n    headers,\n    fetch,\n    cookieOptions,\n    multiTab,\n  }: SupabaseClientOptions) {\n    const authHeaders = {\n      Authorization: `Bearer ${this.supabaseKey}`,\n      apikey: `${this.supabaseKey}`,\n    }\n    return new SupabaseAuthClient({\n      url: this.authUrl,\n      headers: { ...headers, ...authHeaders },\n      autoRefreshToken,\n      persistSession,\n      detectSessionInUrl,\n      localStorage,\n      fetch,\n      cookieOptions,\n      multiTab,\n    })\n  }\n\n  private _initRealtimeClient(options?: RealtimeClientOptions) {\n    return new RealtimeClient(this.realtimeUrl, {\n      ...options,\n      params: { ...options?.params, apikey: this.supabaseKey },\n    })\n  }\n\n  private _initPostgRESTClient() {\n    return new PostgrestClient(this.restUrl, {\n      headers: this._getAuthHeaders(),\n      schema: this.schema,\n      fetch: this.fetch,\n      throwOnError: this.shouldThrowOnError,\n    })\n  }\n\n  private _getAuthHeaders(): GenericObject {\n    const headers: GenericObject = { ...this.headers }\n    const authBearer = this.auth.session()?.access_token ?? this.supabaseKey\n    headers['apikey'] = this.supabaseKey\n    headers['Authorization'] = headers['Authorization'] || `Bearer ${authBearer}`\n    return headers\n  }\n\n  private _listenForMultiTabEvents() {\n    if (!this.multiTab || !isBrowser() || !window?.addEventListener) {\n      return null\n    }\n\n    try {\n      return window?.addEventListener('storage', (e: StorageEvent) => {\n        if (e.key === STORAGE_KEY) {\n          const newSession = JSON.parse(String(e.newValue))\n          const accessToken: string | undefined =\n            newSession?.currentSession?.access_token ?? undefined\n          const previousAccessToken = this.auth.session()?.access_token\n          if (!accessToken) {\n            this._handleTokenChanged('SIGNED_OUT', accessToken, 'STORAGE')\n          } else if (!previousAccessToken && accessToken) {\n            this._handleTokenChanged('SIGNED_IN', accessToken, 'STORAGE')\n          } else if (previousAccessToken !== accessToken) {\n            this._handleTokenChanged('TOKEN_REFRESHED', accessToken, 'STORAGE')\n          }\n        }\n      })\n    } catch (error) {\n      console.error('_listenForMultiTabEvents', error)\n      return null\n    }\n  }\n\n  private _listenForAuthEvents() {\n    let { data } = this.auth.onAuthStateChange((event, session) => {\n      this._handleTokenChanged(event, session?.access_token, 'CLIENT')\n    })\n    return data\n  }\n\n  private _handleTokenChanged(\n    event: AuthChangeEvent,\n    token: string | undefined,\n    source: 'CLIENT' | 'STORAGE'\n  ) {\n    if (\n      (event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n      this.changedAccessToken !== token\n    ) {\n      // Token has changed\n      this.realtime.setAuth(token!)\n      // Ideally we should call this.auth.recoverSession() - need to make public\n      // to trigger a \"SIGNED_IN\" event on this client.\n      if (source == 'STORAGE') this.auth.setAuth(token!)\n\n      this.changedAccessToken = token\n    } else if (event === 'SIGNED_OUT' || event === 'USER_DELETED') {\n      // Token is removed\n      this.realtime.setAuth(this.supabaseKey)\n      if (source == 'STORAGE') this.auth.signOut()\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}