{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { get, post, put, remove } from './lib/fetch';\nimport { COOKIE_OPTIONS } from './lib/constants';\nimport { setCookies, getCookieString } from './lib/cookies';\nimport { expiresAt, resolveFetch } from './lib/helpers';\nvar GoTrueApi = /*#__PURE__*/function () {\n  function GoTrueApi(_ref) {\n    var _ref$url = _ref.url,\n      url = _ref$url === void 0 ? '' : _ref$url,\n      _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      cookieOptions = _ref.cookieOptions,\n      fetch = _ref.fetch;\n    _classCallCheck(this, GoTrueApi);\n    this.url = url;\n    this.headers = headers;\n    this.cookieOptions = Object.assign(Object.assign({}, COOKIE_OPTIONS), cookieOptions);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Create a temporary object with all configured headers and\n   * adds the Authorization token to be used on request methods\n   * @param jwt A valid, logged-in JWT.\n   */\n  _createClass(GoTrueApi, [{\n    key: \"_createRequestHeaders\",\n    value: function _createRequestHeaders(jwt) {\n      var headers = Object.assign({}, this.headers);\n      headers['Authorization'] = \"Bearer \".concat(jwt);\n      return headers;\n    }\n  }, {\n    key: \"cookieName\",\n    value: function cookieName() {\n      var _a;\n      return (_a = this.cookieOptions.name) !== null && _a !== void 0 ? _a : '';\n    }\n    /**\n     * Generates the relevant login URL for a third-party provider.\n     * @param provider One of the providers supported by GoTrue.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param scopes A space-separated list of scopes granted to the OAuth application.\n     */\n  }, {\n    key: \"getUrlForProvider\",\n    value: function getUrlForProvider(provider, options) {\n      var urlParams = [\"provider=\".concat(encodeURIComponent(provider))];\n      if (options === null || options === void 0 ? void 0 : options.redirectTo) {\n        urlParams.push(\"redirect_to=\".concat(encodeURIComponent(options.redirectTo)));\n      }\n      if (options === null || options === void 0 ? void 0 : options.scopes) {\n        urlParams.push(\"scopes=\".concat(encodeURIComponent(options.scopes)));\n      }\n      if (options === null || options === void 0 ? void 0 : options.queryParams) {\n        var query = new URLSearchParams(options.queryParams);\n        urlParams.push(\"\".concat(query));\n      }\n      return \"\".concat(this.url, \"/authorize?\").concat(urlParams.join('&'));\n    }\n    /**\n     * Creates a new user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     *\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\n     * @returns A user if the server has \"autoconfirm\" OFF\n     */\n  }, {\n    key: \"signUpWithEmail\",\n    value: function signUpWithEmail(email, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n                if (options.redirectTo) {\n                  queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                _context.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/signup\").concat(queryString), {\n                  email: email,\n                  password: password,\n                  data: options.data,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 6:\n                data = _context.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 12:\n                _context.prev = 12;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Logs in an existing user using their email address.\n     * @param email The email address of the user.\n     * @param password The password of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     */\n  }, {\n    key: \"signInWithEmail\",\n    value: function signInWithEmail(email, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '?grant_type=password';\n                if (options.redirectTo) {\n                  queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                _context2.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/token\").concat(queryString), {\n                  email: email,\n                  password: password,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 6:\n                data = _context2.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context2.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 12:\n                _context2.prev = 12;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n              case 15:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Signs up a new user using their phone number and a password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     * @param data Optional user metadata.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     */\n  }, {\n    key: \"signUpWithPhone\",\n    value: function signUpWithPhone(phone, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var headers, data, session;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                headers = Object.assign({}, this.headers);\n                _context3.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/signup\"), {\n                  phone: phone,\n                  password: password,\n                  data: options.data,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 4:\n                data = _context3.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context3.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 10:\n                _context3.prev = 10;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n              case 13:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Logs in an existing user using their phone number and password.\n     * @param phone The phone number of the user.\n     * @param password The password of the user.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     */\n  }, {\n    key: \"signInWithPhone\",\n    value: function signInWithPhone(phone, password) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '?grant_type=password';\n                _context4.next = 5;\n                return post(this.fetch, \"\".concat(this.url, \"/token\").concat(queryString), {\n                  phone: phone,\n                  password: password,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 5:\n                data = _context4.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context4.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 11:\n                _context4.prev = 11;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n              case 14:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Logs in an OpenID Connect user using their id_token.\n     * @param id_token The IDToken of the user.\n     * @param nonce The nonce of the user. The nonce is a random value generated by the developer (= yourself) before the initial grant is started. You should check the OpenID Connect specification for details. https://openid.net/developers/specs/\n     * @param provider The provider of the user.\n     * @param client_id The clientID of the user.\n     * @param issuer The issuer of the user.\n     */\n  }, {\n    key: \"signInWithOpenIDConnect\",\n    value: function signInWithOpenIDConnect(_ref2) {\n      var id_token = _ref2.id_token,\n        nonce = _ref2.nonce,\n        client_id = _ref2.client_id,\n        issuer = _ref2.issuer,\n        provider = _ref2.provider;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var headers, queryString, data, session;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '?grant_type=id_token';\n                _context5.next = 5;\n                return post(this.fetch, \"\".concat(this.url, \"/token\").concat(queryString), {\n                  id_token: id_token,\n                  nonce: nonce,\n                  client_id: client_id,\n                  issuer: issuer,\n                  provider: provider\n                }, {\n                  headers: headers\n                });\n              case 5:\n                data = _context5.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context5.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 11:\n                _context5.prev = 11;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Sends a magic login link to an email address.\n     * @param email The email address of the user.\n     * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     */\n  }, {\n    key: \"sendMagicLinkEmail\",\n    value: function sendMagicLinkEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var headers, queryString, shouldCreateUser, data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n                if (options.redirectTo) {\n                  queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                shouldCreateUser = (_a = options.shouldCreateUser) !== null && _a !== void 0 ? _a : true;\n                _context6.next = 7;\n                return post(this.fetch, \"\".concat(this.url, \"/otp\").concat(queryString), {\n                  email: email,\n                  create_user: shouldCreateUser,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 7:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 11:\n                _context6.prev = 11;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n              case 14:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n     * @param phone The user's phone number WITH international prefix\n     * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     */\n  }, {\n    key: \"sendMobileOTP\",\n    value: function sendMobileOTP(phone) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _a;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var shouldCreateUser, headers, data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                shouldCreateUser = (_a = options.shouldCreateUser) !== null && _a !== void 0 ? _a : true;\n                headers = Object.assign({}, this.headers);\n                _context7.next = 5;\n                return post(this.fetch, \"\".concat(this.url, \"/otp\"), {\n                  phone: phone,\n                  create_user: shouldCreateUser,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 5:\n                data = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 9:\n                _context7.prev = 9;\n                _context7.t0 = _context7[\"catch\"](0);\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 9]]);\n      }));\n    }\n    /**\n     * Removes a logged-in session.\n     * @param jwt A valid, logged-in JWT.\n     */\n  }, {\n    key: \"signOut\",\n    value: function signOut(jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _context8.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/logout\"), {}, {\n                  headers: this._createRequestHeaders(jwt),\n                  noResolveJson: true\n                });\n              case 3:\n                return _context8.abrupt(\"return\", {\n                  error: null\n                });\n              case 6:\n                _context8.prev = 6;\n                _context8.t0 = _context8[\"catch\"](0);\n                return _context8.abrupt(\"return\", {\n                  error: _context8.t0\n                });\n              case 9:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 6]]);\n      }));\n    }\n    /**\n     * @deprecated Use `verifyOTP` instead!\n     * @param phone The user's phone number WITH international prefix\n     * @param token token that user was sent to their mobile phone\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n  }, {\n    key: \"verifyMobileOTP\",\n    value: function verifyMobileOTP(phone, token) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var headers, data, session;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                headers = Object.assign({}, this.headers);\n                _context9.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/verify\"), {\n                  phone: phone,\n                  token: token,\n                  type: 'sms',\n                  redirect_to: options.redirectTo\n                }, {\n                  headers: headers\n                });\n              case 4:\n                data = _context9.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context9.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 10:\n                _context9.prev = 10;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", {\n                  data: null,\n                  error: _context9.t0\n                });\n              case 13:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Send User supplied Email / Mobile OTP to be verified\n     * @param email The user's email address\n     * @param phone The user's phone number WITH international prefix\n     * @param token token that user was sent to their mobile phone\n     * @param type verification type that the otp is generated for\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     */\n  }, {\n    key: \"verifyOTP\",\n    value: function verifyOTP(_ref3) {\n      var email = _ref3.email,\n        phone = _ref3.phone,\n        token = _ref3.token,\n        _ref3$type = _ref3.type,\n        type = _ref3$type === void 0 ? 'sms' : _ref3$type;\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var headers, data, session;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                headers = Object.assign({}, this.headers);\n                _context10.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/verify\"), {\n                  email: email,\n                  phone: phone,\n                  token: token,\n                  type: type,\n                  redirect_to: options.redirectTo\n                }, {\n                  headers: headers\n                });\n              case 4:\n                data = _context10.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context10.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 10:\n                _context10.prev = 10;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", {\n                  data: null,\n                  error: _context10.t0\n                });\n              case 13:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Sends an invite link to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param data Optional user metadata\n     */\n  }, {\n    key: \"inviteUserByEmail\",\n    value: function inviteUserByEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var headers, queryString, data;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n                if (options.redirectTo) {\n                  queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                _context11.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/invite\").concat(queryString), {\n                  email: email,\n                  data: options.data\n                }, {\n                  headers: headers\n                });\n              case 6:\n                data = _context11.sent;\n                return _context11.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 10:\n                _context11.prev = 10;\n                _context11.t0 = _context11[\"catch\"](0);\n                return _context11.abrupt(\"return\", {\n                  data: null,\n                  error: _context11.t0\n                });\n              case 13:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Sends a reset request to an email address.\n     * @param email The email address of the user.\n     * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n     * @param captchaToken Verification token received when the user completes the captcha on your site.\n     */\n  }, {\n    key: \"resetPasswordForEmail\",\n    value: function resetPasswordForEmail(email) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var headers, queryString, data;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                _context12.prev = 0;\n                headers = Object.assign({}, this.headers);\n                queryString = '';\n                if (options.redirectTo) {\n                  queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo);\n                }\n                _context12.next = 6;\n                return post(this.fetch, \"\".concat(this.url, \"/recover\").concat(queryString), {\n                  email: email,\n                  gotrue_meta_security: {\n                    captcha_token: options.captchaToken\n                  }\n                }, {\n                  headers: headers\n                });\n              case 6:\n                data = _context12.sent;\n                return _context12.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 10:\n                _context12.prev = 10;\n                _context12.t0 = _context12[\"catch\"](0);\n                return _context12.abrupt(\"return\", {\n                  data: null,\n                  error: _context12.t0\n                });\n              case 13:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Generates a new JWT.\n     * @param refreshToken A valid refresh token that was returned on login.\n     */\n  }, {\n    key: \"refreshAccessToken\",\n    value: function refreshAccessToken(refreshToken) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n        var data, session;\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.prev = 0;\n                _context13.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/token?grant_type=refresh_token\"), {\n                  refresh_token: refreshToken\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context13.sent;\n                session = Object.assign({}, data);\n                if (session.expires_in) session.expires_at = expiresAt(data.expires_in);\n                return _context13.abrupt(\"return\", {\n                  data: session,\n                  error: null\n                });\n              case 9:\n                _context13.prev = 9;\n                _context13.t0 = _context13[\"catch\"](0);\n                return _context13.abrupt(\"return\", {\n                  data: null,\n                  error: _context13.t0\n                });\n              case 12:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this, [[0, 9]]);\n      }));\n    }\n    /**\n     * Set/delete the auth cookie based on the AuthChangeEvent.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     * @param req The request object.\n     * @param res The response object.\n     */\n  }, {\n    key: \"setAuthCookie\",\n    value: function setAuthCookie(req, res) {\n      var _this = this;\n      if (req.method !== 'POST') {\n        res.setHeader('Allow', 'POST');\n        res.status(405).end('Method Not Allowed');\n      }\n      var _req$body = req.body,\n        event = _req$body.event,\n        session = _req$body.session;\n      if (!event) throw new Error('Auth event missing!');\n      if (event === 'SIGNED_IN') {\n        if (!session) throw new Error('Auth session missing!');\n        setCookies(req, res, [{\n          key: 'access-token',\n          value: session.access_token\n        }, {\n          key: 'refresh-token',\n          value: session.refresh_token\n        }].map(function (token) {\n          var _a;\n          return {\n            name: \"\".concat(_this.cookieName(), \"-\").concat(token.key),\n            value: token.value,\n            domain: _this.cookieOptions.domain,\n            maxAge: (_a = _this.cookieOptions.lifetime) !== null && _a !== void 0 ? _a : 0,\n            path: _this.cookieOptions.path,\n            sameSite: _this.cookieOptions.sameSite\n          };\n        }));\n      }\n      if (event === 'SIGNED_OUT') {\n        setCookies(req, res, ['access-token', 'refresh-token'].map(function (key) {\n          return {\n            name: \"\".concat(_this.cookieName(), \"-\").concat(key),\n            value: '',\n            maxAge: -1\n          };\n        }));\n      }\n      res.status(200).json({});\n    }\n    /**\n     * Deletes the Auth Cookies and redirects to the\n     * @param req The request object.\n     * @param res The response object.\n     * @param options Optionally specify a `redirectTo` URL in the options.\n     */\n  }, {\n    key: \"deleteAuthCookie\",\n    value: function deleteAuthCookie(req, res, _ref4) {\n      var _this2 = this;\n      var _ref4$redirectTo = _ref4.redirectTo,\n        redirectTo = _ref4$redirectTo === void 0 ? '/' : _ref4$redirectTo;\n      setCookies(req, res, ['access-token', 'refresh-token'].map(function (key) {\n        return {\n          name: \"\".concat(_this2.cookieName(), \"-\").concat(key),\n          value: '',\n          maxAge: -1\n        };\n      }));\n      return res.redirect(307, redirectTo);\n    }\n    /**\n     * Helper method to generate the Auth Cookie string for you in case you can't use `setAuthCookie`.\n     * @param req The request object.\n     * @param res The response object.\n     * @returns The Cookie string that needs to be set as the value for the `Set-Cookie` header.\n     */\n  }, {\n    key: \"getAuthCookieString\",\n    value: function getAuthCookieString(req, res) {\n      var _this3 = this;\n      if (req.method !== 'POST') {\n        res.setHeader('Allow', 'POST');\n        res.status(405).end('Method Not Allowed');\n      }\n      var _req$body2 = req.body,\n        event = _req$body2.event,\n        session = _req$body2.session;\n      if (!event) throw new Error('Auth event missing!');\n      if (event === 'SIGNED_IN') {\n        if (!session) throw new Error('Auth session missing!');\n        return getCookieString(req, res, [{\n          key: 'access-token',\n          value: session.access_token\n        }, {\n          key: 'refresh-token',\n          value: session.refresh_token\n        }].map(function (token) {\n          var _a;\n          return {\n            name: \"\".concat(_this3.cookieName(), \"-\").concat(token.key),\n            value: token.value,\n            domain: _this3.cookieOptions.domain,\n            maxAge: (_a = _this3.cookieOptions.lifetime) !== null && _a !== void 0 ? _a : 0,\n            path: _this3.cookieOptions.path,\n            sameSite: _this3.cookieOptions.sameSite\n          };\n        }));\n      }\n      if (event === 'SIGNED_OUT') {\n        return getCookieString(req, res, ['access-token', 'refresh-token'].map(function (key) {\n          return {\n            name: \"\".concat(_this3.cookieName(), \"-\").concat(key),\n            value: '',\n            maxAge: -1\n          };\n        }));\n      }\n      return res.getHeader('Set-Cookie');\n    }\n    /**\n     * Generates links to be sent via email or other.\n     * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     * @param email The user's email.\n     * @param password User password. For signup only.\n     * @param data Optional user metadata. For signup only.\n     * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n     */\n  }, {\n    key: \"generateLink\",\n    value: function generateLink(type, email) {\n      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                _context14.prev = 0;\n                _context14.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/admin/generate_link\"), {\n                  type: type,\n                  email: email,\n                  password: options.password,\n                  data: options.data,\n                  redirect_to: options.redirectTo\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context14.sent;\n                return _context14.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context14.prev = 7;\n                _context14.t0 = _context14[\"catch\"](0);\n                return _context14.abrupt(\"return\", {\n                  data: null,\n                  error: _context14.t0\n                });\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this, [[0, 7]]);\n      }));\n    }\n    // User Admin API\n    /**\n     * Creates a new user.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     *\n     * @param attributes The data you want to create the user with.\n     */\n  }, {\n    key: \"createUser\",\n    value: function createUser(attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                _context15.prev = 0;\n                _context15.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/admin/users\"), attributes, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context15.sent;\n                return _context15.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context15.prev = 7;\n                _context15.t0 = _context15[\"catch\"](0);\n                return _context15.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context15.t0\n                });\n              case 10:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get a list of users.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"listUsers\",\n    value: function listUsers() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.prev = 0;\n                _context16.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/admin/users\"), {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context16.sent;\n                return _context16.abrupt(\"return\", {\n                  data: data.users,\n                  error: null\n                });\n              case 7:\n                _context16.prev = 7;\n                _context16.t0 = _context16[\"catch\"](0);\n                return _context16.abrupt(\"return\", {\n                  data: null,\n                  error: _context16.t0\n                });\n              case 10:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get user by id.\n     *\n     * @param uid The user's unique identifier\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"getUserById\",\n    value: function getUserById(uid) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.prev = 0;\n                _context17.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/admin/users/\").concat(uid), {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context17.sent;\n                return _context17.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context17.prev = 7;\n                _context17.t0 = _context17[\"catch\"](0);\n                return _context17.abrupt(\"return\", {\n                  data: null,\n                  error: _context17.t0\n                });\n              case 10:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get user by reading the cookie from the request.\n     * Works for Next.js & Express (requires cookie-parser middleware).\n     */\n  }, {\n    key: \"getUserByCookie\",\n    value: function getUserByCookie(req, res) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n        var _this4 = this;\n        var access_token, refresh_token, _yield$this$getUser, user, getUserError, _yield$this$refreshAc, data, error;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.prev = 0;\n                if (req.cookies) {\n                  _context18.next = 3;\n                  break;\n                }\n                throw new Error('Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!');\n              case 3:\n                access_token = req.cookies[\"\".concat(this.cookieName(), \"-access-token\")];\n                refresh_token = req.cookies[\"\".concat(this.cookieName(), \"-refresh-token\")];\n                if (access_token) {\n                  _context18.next = 7;\n                  break;\n                }\n                throw new Error('No cookie found!');\n              case 7:\n                _context18.next = 9;\n                return this.getUser(access_token);\n              case 9:\n                _yield$this$getUser = _context18.sent;\n                user = _yield$this$getUser.user;\n                getUserError = _yield$this$getUser.error;\n                if (!getUserError) {\n                  _context18.next = 29;\n                  break;\n                }\n                if (refresh_token) {\n                  _context18.next = 15;\n                  break;\n                }\n                throw new Error('No refresh_token cookie found!');\n              case 15:\n                if (res) {\n                  _context18.next = 17;\n                  break;\n                }\n                throw new Error('You need to pass the res object to automatically refresh the session!');\n              case 17:\n                _context18.next = 19;\n                return this.refreshAccessToken(refresh_token);\n              case 19:\n                _yield$this$refreshAc = _context18.sent;\n                data = _yield$this$refreshAc.data;\n                error = _yield$this$refreshAc.error;\n                if (!error) {\n                  _context18.next = 26;\n                  break;\n                }\n                throw error;\n              case 26:\n                if (!data) {\n                  _context18.next = 29;\n                  break;\n                }\n                setCookies(req, res, [{\n                  key: 'access-token',\n                  value: data.access_token\n                }, {\n                  key: 'refresh-token',\n                  value: data.refresh_token\n                }].map(function (token) {\n                  var _a;\n                  return {\n                    name: \"\".concat(_this4.cookieName(), \"-\").concat(token.key),\n                    value: token.value,\n                    domain: _this4.cookieOptions.domain,\n                    maxAge: (_a = _this4.cookieOptions.lifetime) !== null && _a !== void 0 ? _a : 0,\n                    path: _this4.cookieOptions.path,\n                    sameSite: _this4.cookieOptions.sameSite\n                  };\n                }));\n                return _context18.abrupt(\"return\", {\n                  token: data.access_token,\n                  user: data.user,\n                  data: data.user,\n                  error: null\n                });\n              case 29:\n                return _context18.abrupt(\"return\", {\n                  token: access_token,\n                  user: user,\n                  data: user,\n                  error: null\n                });\n              case 32:\n                _context18.prev = 32;\n                _context18.t0 = _context18[\"catch\"](0);\n                return _context18.abrupt(\"return\", {\n                  token: null,\n                  user: null,\n                  data: null,\n                  error: _context18.t0\n                });\n              case 35:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this, [[0, 32]]);\n      }));\n    }\n    /**\n     * Updates the user data.\n     *\n     * @param attributes The data you want to update.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     */\n  }, {\n    key: \"updateUserById\",\n    value: function updateUserById(uid, attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.prev = 0;\n                this; //\n                _context19.next = 4;\n                return put(this.fetch, \"\".concat(this.url, \"/admin/users/\").concat(uid), attributes, {\n                  headers: this.headers\n                });\n              case 4:\n                data = _context19.sent;\n                return _context19.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n              case 8:\n                _context19.prev = 8;\n                _context19.t0 = _context19[\"catch\"](0);\n                return _context19.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context19.t0\n                });\n              case 11:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Delete a user. Requires a `service_role` key.\n     *\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\n     *\n     * @param uid The user uid you want to remove.\n     */\n  }, {\n    key: \"deleteUser\",\n    value: function deleteUser(uid) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                _context20.prev = 0;\n                _context20.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/admin/users/\").concat(uid), {}, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context20.sent;\n                return _context20.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context20.prev = 7;\n                _context20.t0 = _context20[\"catch\"](0);\n                return _context20.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context20.t0\n                });\n              case 10:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Gets the current user details.\n     *\n     * This method is called by the GoTrueClient `update` where\n     * the jwt is set to this.currentSession.access_token\n     * and therefore, acts like getting the currently authenticated user\n     *\n     * @param jwt A valid, logged-in JWT. Typically, the access_token for the currentSession\n     */\n  }, {\n    key: \"getUser\",\n    value: function getUser(jwt) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.prev = 0;\n                _context21.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/user\"), {\n                  headers: this._createRequestHeaders(jwt)\n                });\n              case 3:\n                data = _context21.sent;\n                return _context21.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context21.prev = 7;\n                _context21.t0 = _context21[\"catch\"](0);\n                return _context21.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context21.t0\n                });\n              case 10:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates the user data.\n     * @param jwt A valid, logged-in JWT.\n     * @param attributes The data you want to update.\n     */\n  }, {\n    key: \"updateUser\",\n    value: function updateUser(jwt, attributes) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.prev = 0;\n                _context22.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/user\"), attributes, {\n                  headers: this._createRequestHeaders(jwt)\n                });\n              case 3:\n                data = _context22.sent;\n                return _context22.abrupt(\"return\", {\n                  user: data,\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context22.prev = 7;\n                _context22.t0 = _context22[\"catch\"](0);\n                return _context22.abrupt(\"return\", {\n                  user: null,\n                  data: null,\n                  error: _context22.t0\n                });\n              case 10:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this, [[0, 7]]);\n      }));\n    }\n  }]);\n  return GoTrueApi;\n}();\nexport { GoTrueApi as default };","map":{"version":3,"names":["get","post","put","remove","COOKIE_OPTIONS","setCookies","getCookieString","expiresAt","resolveFetch","GoTrueApi","_ref","_ref$url","url","_ref$headers","headers","cookieOptions","fetch","_classCallCheck","Object","assign","_createClass","key","value","_createRequestHeaders","jwt","concat","cookieName","_a","name","getUrlForProvider","provider","options","urlParams","encodeURIComponent","redirectTo","push","scopes","queryParams","query","URLSearchParams","join","signUpWithEmail","email","password","arguments","length","undefined","queryString","_context","next","data","gotrue_meta_security","captcha_token","captchaToken","sent","session","expires_in","expires_at","abrupt","error","prev","t0","stop","_callee","signInWithEmail","_context2","_callee2","signUpWithPhone","phone","_context3","_callee3","signInWithPhone","_context4","_callee4","signInWithOpenIDConnect","_ref2","id_token","nonce","client_id","issuer","_context5","_callee5","sendMagicLinkEmail","shouldCreateUser","_context6","create_user","_callee6","sendMobileOTP","_context7","_callee7","signOut","noResolveJson","_context8","_callee8","verifyMobileOTP","token","_context9","type","redirect_to","_callee9","verifyOTP","_ref3","_ref3$type","_context10","_callee10","inviteUserByEmail","_context11","_callee11","resetPasswordForEmail","_context12","_callee12","refreshAccessToken","refreshToken","refresh_token","_context13","_callee13","setAuthCookie","req","res","_this","method","setHeader","status","end","_req$body","body","event","Error","access_token","map","domain","maxAge","lifetime","path","sameSite","json","deleteAuthCookie","_ref4","_this2","_ref4$redirectTo","redirect","getAuthCookieString","_this3","_req$body2","getHeader","generateLink","_context14","_callee14","createUser","attributes","_context15","user","_callee15","listUsers","_context16","users","_callee16","getUserById","uid","_context17","_callee17","getUserByCookie","cookies","_context18","getUser","_yield$this$getUser","getUserError","_yield$this$refreshAc","_this4","_callee18","updateUserById","_context19","_callee19","deleteUser","_context20","_callee20","_context21","_callee21","updateUser","_context22","_callee22","default"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/gotrue-js/src/GoTrueApi.ts"],"sourcesContent":["import { Fetch, get, post, put, remove } from './lib/fetch'\nimport {\n  Session,\n  Provider,\n  AdminUserAttributes,\n  UserAttributes,\n  CookieOptions,\n  User,\n  OpenIDConnectCredentials,\n  VerifyOTPParams,\n} from './lib/types'\nimport { COOKIE_OPTIONS } from './lib/constants'\nimport { setCookies, getCookieString } from './lib/cookies'\nimport { expiresAt, resolveFetch } from './lib/helpers'\n\nimport type { ApiError } from './lib/types'\nexport default class GoTrueApi {\n  protected url: string\n  protected headers: {\n    [key: string]: string\n  }\n  protected cookieOptions: CookieOptions\n  protected fetch: Fetch\n\n  constructor({\n    url = '',\n    headers = {},\n    cookieOptions,\n    fetch,\n  }: {\n    url: string\n    headers?: {\n      [key: string]: string\n    }\n    cookieOptions?: CookieOptions\n    fetch?: Fetch\n  }) {\n    this.url = url\n    this.headers = headers\n    this.cookieOptions = { ...COOKIE_OPTIONS, ...cookieOptions }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Create a temporary object with all configured headers and\n   * adds the Authorization token to be used on request methods\n   * @param jwt A valid, logged-in JWT.\n   */\n  private _createRequestHeaders(jwt: string) {\n    const headers = { ...this.headers }\n    headers['Authorization'] = `Bearer ${jwt}`\n    return headers\n  }\n\n  private cookieName() {\n    return this.cookieOptions.name ?? ''\n  }\n\n  /**\n   * Generates the relevant login URL for a third-party provider.\n   * @param provider One of the providers supported by GoTrue.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param scopes A space-separated list of scopes granted to the OAuth application.\n   */\n  getUrlForProvider(\n    provider: Provider,\n    options: {\n      redirectTo?: string\n      scopes?: string\n      queryParams?: { [key: string]: string }\n    }\n  ) {\n    const urlParams: string[] = [`provider=${encodeURIComponent(provider)}`]\n    if (options?.redirectTo) {\n      urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`)\n    }\n    if (options?.scopes) {\n      urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`)\n    }\n    if (options?.queryParams) {\n      const query = new URLSearchParams(options.queryParams)\n      urlParams.push(`${query}`)\n    }\n    return `${this.url}/authorize?${urlParams.join('&')}`\n  }\n\n  /**\n   * Creates a new user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   *\n   * @returns A logged-in session if the server has \"autoconfirm\" ON\n   * @returns A user if the server has \"autoconfirm\" OFF\n   */\n  async signUpWithEmail(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString = '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/signup${queryString}`,\n        {\n          email,\n          password,\n          data: options.data,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an existing user using their email address.\n   * @param email The email address of the user.\n   * @param password The password of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async signInWithEmail(\n    email: string,\n    password: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = '?grant_type=password'\n      if (options.redirectTo) {\n        queryString += '&redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { email, password, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Signs up a new user using their phone number and a password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   * @param data Optional user metadata.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async signUpWithPhone(\n    phone: string,\n    password: string,\n    options: {\n      data?: object\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/signup`,\n        {\n          phone,\n          password,\n          data: options.data,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an existing user using their phone number and password.\n   * @param phone The phone number of the user.\n   * @param password The password of the user.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async signInWithPhone(\n    phone: string,\n    password: string,\n    options: {\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const queryString = '?grant_type=password'\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { phone, password, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Logs in an OpenID Connect user using their id_token.\n   * @param id_token The IDToken of the user.\n   * @param nonce The nonce of the user. The nonce is a random value generated by the developer (= yourself) before the initial grant is started. You should check the OpenID Connect specification for details. https://openid.net/developers/specs/\n   * @param provider The provider of the user.\n   * @param client_id The clientID of the user.\n   * @param issuer The issuer of the user.\n   */\n  async signInWithOpenIDConnect({\n    id_token,\n    nonce,\n    client_id,\n    issuer,\n    provider,\n  }: OpenIDConnectCredentials): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const queryString = '?grant_type=id_token'\n      const data = await post(\n        this.fetch,\n        `${this.url}/token${queryString}`,\n        { id_token, nonce, client_id, issuer, provider },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a magic login link to an email address.\n   * @param email The email address of the user.\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async sendMagicLinkEmail(\n    email: string,\n    options: {\n      shouldCreateUser?: boolean\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n\n      const shouldCreateUser = options.shouldCreateUser ?? true\n      const data = await post(\n        this.fetch,\n        `${this.url}/otp${queryString}`,\n        {\n          email,\n          create_user: shouldCreateUser,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a mobile OTP via SMS. Will register the account if it doesn't already exist\n   * @param phone The user's phone number WITH international prefix\n   * @param shouldCreateUser A boolean flag to indicate whether to automatically create a user on magiclink / otp sign-ins if the user doesn't exist. Defaults to true.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async sendMobileOTP(\n    phone: string,\n    options: {\n      shouldCreateUser?: boolean\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const shouldCreateUser = options.shouldCreateUser ?? true\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/otp`,\n        {\n          phone,\n          create_user: shouldCreateUser,\n          gotrue_meta_security: { captcha_token: options.captchaToken },\n        },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Removes a logged-in session.\n   * @param jwt A valid, logged-in JWT.\n   */\n  async signOut(jwt: string): Promise<{ error: ApiError | null }> {\n    try {\n      await post(\n        this.fetch,\n        `${this.url}/logout`,\n        {},\n        { headers: this._createRequestHeaders(jwt), noResolveJson: true }\n      )\n      return { error: null }\n    } catch (e) {\n      return { error: e as ApiError }\n    }\n  }\n\n  /**\n   * @deprecated Use `verifyOTP` instead!\n   * @param phone The user's phone number WITH international prefix\n   * @param token token that user was sent to their mobile phone\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyMobileOTP(\n    phone: string,\n    token: string,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/verify`,\n        { phone, token, type: 'sms', redirect_to: options.redirectTo },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Send User supplied Email / Mobile OTP to be verified\n   * @param email The user's email address\n   * @param phone The user's phone number WITH international prefix\n   * @param token token that user was sent to their mobile phone\n   * @param type verification type that the otp is generated for\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   */\n  async verifyOTP(\n    { email, phone, token, type = 'sms' }: VerifyOTPParams,\n    options: {\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      const data = await post(\n        this.fetch,\n        `${this.url}/verify`,\n        { email, phone, token, type, redirect_to: options.redirectTo },\n        { headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends an invite link to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param data Optional user metadata\n   */\n  async inviteUserByEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      data?: object\n    } = {}\n  ): Promise<{ data: User | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/invite${queryString}`,\n        { email, data: options.data },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Sends a reset request to an email address.\n   * @param email The email address of the user.\n   * @param redirectTo A URL or mobile address to send the user to after they are confirmed.\n   * @param captchaToken Verification token received when the user completes the captcha on your site.\n   */\n  async resetPasswordForEmail(\n    email: string,\n    options: {\n      redirectTo?: string\n      captchaToken?: string\n    } = {}\n  ): Promise<{ data: {} | null; error: ApiError | null }> {\n    try {\n      const headers = { ...this.headers }\n      let queryString = ''\n      if (options.redirectTo) {\n        queryString += '?redirect_to=' + encodeURIComponent(options.redirectTo)\n      }\n      const data = await post(\n        this.fetch,\n        `${this.url}/recover${queryString}`,\n        { email, gotrue_meta_security: { captcha_token: options.captchaToken } },\n        { headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Generates a new JWT.\n   * @param refreshToken A valid refresh token that was returned on login.\n   */\n  async refreshAccessToken(\n    refreshToken: string\n  ): Promise<{ data: Session | null; error: ApiError | null }> {\n    try {\n      const data: any = await post(\n        this.fetch,\n        `${this.url}/token?grant_type=refresh_token`,\n        { refresh_token: refreshToken },\n        { headers: this.headers }\n      )\n      const session = { ...data }\n      if (session.expires_in) session.expires_at = expiresAt(data.expires_in)\n      return { data: session, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Set/delete the auth cookie based on the AuthChangeEvent.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   * @param req The request object.\n   * @param res The response object.\n   */\n  setAuthCookie(req: any, res: any) {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST')\n      res.status(405).end('Method Not Allowed')\n    }\n    const { event, session } = req.body\n\n    if (!event) throw new Error('Auth event missing!')\n    if (event === 'SIGNED_IN') {\n      if (!session) throw new Error('Auth session missing!')\n      setCookies(\n        req,\n        res,\n        [\n          { key: 'access-token', value: session.access_token },\n          { key: 'refresh-token', value: session.refresh_token },\n        ].map((token) => ({\n          name: `${this.cookieName()}-${token.key}`,\n          value: token.value,\n          domain: this.cookieOptions.domain,\n          maxAge: this.cookieOptions.lifetime ?? 0,\n          path: this.cookieOptions.path,\n          sameSite: this.cookieOptions.sameSite,\n        }))\n      )\n    }\n    if (event === 'SIGNED_OUT') {\n      setCookies(\n        req,\n        res,\n        ['access-token', 'refresh-token'].map((key) => ({\n          name: `${this.cookieName()}-${key}`,\n          value: '',\n          maxAge: -1,\n        }))\n      )\n    }\n    res.status(200).json({})\n  }\n\n  /**\n   * Deletes the Auth Cookies and redirects to the\n   * @param req The request object.\n   * @param res The response object.\n   * @param options Optionally specify a `redirectTo` URL in the options.\n   */\n  deleteAuthCookie(req: any, res: any, { redirectTo = '/' }: { redirectTo?: string }) {\n    setCookies(\n      req,\n      res,\n      ['access-token', 'refresh-token'].map((key) => ({\n        name: `${this.cookieName()}-${key}`,\n        value: '',\n        maxAge: -1,\n      }))\n    )\n    return res.redirect(307, redirectTo)\n  }\n\n  /**\n   * Helper method to generate the Auth Cookie string for you in case you can't use `setAuthCookie`.\n   * @param req The request object.\n   * @param res The response object.\n   * @returns The Cookie string that needs to be set as the value for the `Set-Cookie` header.\n   */\n  getAuthCookieString(req: any, res: any): string[] {\n    if (req.method !== 'POST') {\n      res.setHeader('Allow', 'POST')\n      res.status(405).end('Method Not Allowed')\n    }\n    const { event, session } = req.body\n\n    if (!event) throw new Error('Auth event missing!')\n    if (event === 'SIGNED_IN') {\n      if (!session) throw new Error('Auth session missing!')\n      return getCookieString(\n        req,\n        res,\n        [\n          { key: 'access-token', value: session.access_token },\n          { key: 'refresh-token', value: session.refresh_token },\n        ].map((token) => ({\n          name: `${this.cookieName()}-${token.key}`,\n          value: token.value,\n          domain: this.cookieOptions.domain,\n          maxAge: this.cookieOptions.lifetime ?? 0,\n          path: this.cookieOptions.path,\n          sameSite: this.cookieOptions.sameSite,\n        }))\n      )\n    }\n    if (event === 'SIGNED_OUT') {\n      return getCookieString(\n        req,\n        res,\n        ['access-token', 'refresh-token'].map((key) => ({\n          name: `${this.cookieName()}-${key}`,\n          value: '',\n          maxAge: -1,\n        }))\n      )\n    }\n    return res.getHeader('Set-Cookie')\n  }\n\n  /**\n   * Generates links to be sent via email or other.\n   * @param type The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   * @param email The user's email.\n   * @param password User password. For signup only.\n   * @param data Optional user metadata. For signup only.\n   * @param redirectTo The link type (\"signup\" or \"magiclink\" or \"recovery\" or \"invite\").\n   */\n  async generateLink(\n    type:\n      | 'signup'\n      | 'magiclink'\n      | 'recovery'\n      | 'invite'\n      | 'email_change_current'\n      | 'email_change_new',\n    email: string,\n    options: {\n      password?: string\n      data?: object\n      redirectTo?: string\n    } = {}\n  ): Promise<{ data: Session | User | null; error: ApiError | null }> {\n    try {\n      const data: any = await post(\n        this.fetch,\n        `${this.url}/admin/generate_link`,\n        {\n          type,\n          email,\n          password: options.password,\n          data: options.data,\n          redirect_to: options.redirectTo,\n        },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  // User Admin API\n\n  /**\n   * Creates a new user.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param attributes The data you want to create the user with.\n   */\n  async createUser(\n    attributes: AdminUserAttributes\n  ): Promise<\n    { user: null; data: null; error: ApiError } | { user: User; data: User; error: null }\n  > {\n    try {\n      const data: any = await post(this.fetch, `${this.url}/admin/users`, attributes, {\n        headers: this.headers,\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get a list of users.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async listUsers(): Promise<{ data: null; error: ApiError } | { data: User[]; error: null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/admin/users`, {\n        headers: this.headers,\n      })\n      return { data: data.users, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get user by id.\n   *\n   * @param uid The user's unique identifier\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async getUserById(\n    uid: string\n  ): Promise<{ data: null; error: ApiError } | { data: User; error: null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/admin/users/${uid}`, {\n        headers: this.headers,\n      })\n      return { data, error: null }\n    } catch (e) {\n      return { data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Get user by reading the cookie from the request.\n   * Works for Next.js & Express (requires cookie-parser middleware).\n   */\n  async getUserByCookie(\n    req: any,\n    res?: any\n  ): Promise<{\n    token: string | null\n    user: User | null\n    data: User | null\n    error: ApiError | null\n  }> {\n    try {\n      if (!req.cookies) {\n        throw new Error(\n          'Not able to parse cookies! When using Express make sure the cookie-parser middleware is in use!'\n        )\n      }\n\n      const access_token = req.cookies[`${this.cookieName()}-access-token`]\n      const refresh_token = req.cookies[`${this.cookieName()}-refresh-token`]\n\n      if (!access_token) {\n        throw new Error('No cookie found!')\n      }\n\n      const { user, error: getUserError } = await this.getUser(access_token)\n      if (getUserError) {\n        if (!refresh_token) throw new Error('No refresh_token cookie found!')\n        if (!res)\n          throw new Error('You need to pass the res object to automatically refresh the session!')\n        const { data, error } = await this.refreshAccessToken(refresh_token)\n        if (error) {\n          throw error\n        } else if (data) {\n          setCookies(\n            req,\n            res,\n            [\n              { key: 'access-token', value: data.access_token },\n              { key: 'refresh-token', value: data.refresh_token! },\n            ].map((token) => ({\n              name: `${this.cookieName()}-${token.key}`,\n              value: token.value,\n              domain: this.cookieOptions.domain,\n              maxAge: this.cookieOptions.lifetime ?? 0,\n              path: this.cookieOptions.path,\n              sameSite: this.cookieOptions.sameSite,\n            }))\n          )\n          return { token: data.access_token, user: data.user, data: data.user, error: null }\n        }\n      }\n      return { token: access_token, user: user, data: user, error: null }\n    } catch (e) {\n      return { token: null, user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates the user data.\n   *\n   * @param attributes The data you want to update.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   */\n  async updateUserById(\n    uid: string,\n    attributes: AdminUserAttributes\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      this //\n      const data: any = await put(this.fetch, `${this.url}/admin/users/${uid}`, attributes, {\n        headers: this.headers,\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Delete a user. Requires a `service_role` key.\n   *\n   * This function should only be called on a server. Never expose your `service_role` key in the browser.\n   *\n   * @param uid The user uid you want to remove.\n   */\n  async deleteUser(\n    uid: string\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await remove(\n        this.fetch,\n        `${this.url}/admin/users/${uid}`,\n        {},\n        {\n          headers: this.headers,\n        }\n      )\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Gets the current user details.\n   *\n   * This method is called by the GoTrueClient `update` where\n   * the jwt is set to this.currentSession.access_token\n   * and therefore, acts like getting the currently authenticated user\n   *\n   * @param jwt A valid, logged-in JWT. Typically, the access_token for the currentSession\n   */\n  async getUser(\n    jwt: string\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await get(this.fetch, `${this.url}/user`, {\n        headers: this._createRequestHeaders(jwt),\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n\n  /**\n   * Updates the user data.\n   * @param jwt A valid, logged-in JWT.\n   * @param attributes The data you want to update.\n   */\n  async updateUser(\n    jwt: string,\n    attributes: UserAttributes\n  ): Promise<{ user: User | null; data: User | null; error: ApiError | null }> {\n    try {\n      const data: any = await put(this.fetch, `${this.url}/user`, attributes, {\n        headers: this._createRequestHeaders(jwt),\n      })\n      return { user: data, data, error: null }\n    } catch (e) {\n      return { user: null, data: null, error: e as ApiError }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}