{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { get, post, remove as _remove } from './fetch';\nimport { resolveFetch } from './helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nexport var StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, StorageFileApi);\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                  'x-upsert': String(options.upsert)\n                });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                  body = new FormData();\n                  body.append('cacheControl', options.cacheControl);\n                  body.append('', fileBody);\n                } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                  body = fileBody;\n                  body.append('cacheControl', options.cacheControl);\n                } else {\n                  body = fileBody;\n                  headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                  headers['content-type'] = options.contentType;\n                }\n                cleanPath = this._removeEmptyFolders(path);\n                _path = this._getFinalPath(cleanPath);\n                _context.next = 8;\n                return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), {\n                  method: method,\n                  body: body,\n                  headers: headers\n                });\n              case 8:\n                res = _context.sent;\n                if (!res.ok) {\n                  _context.next = 13;\n                  break;\n                }\n                return _context.abrupt(\"return\", {\n                  data: {\n                    Key: _path\n                  },\n                  error: null\n                });\n              case 13:\n                _context.next = 15;\n                return res.json();\n              case 15:\n                error = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: error\n                });\n              case 17:\n                _context.next = 22;\n                break;\n              case 19:\n                _context.prev = 19;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     * @param fileOptions HTTP headers.\n     * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n     * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n     * `upsert`: boolean, whether to perform an upsert.\n     */\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                return _context3.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n              case 1:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Moves an existing file.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Copies an existing file.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                  bucketId: this.bucketId,\n                  sourceKey: fromPath,\n                  destinationKey: toPath\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n     *\n     * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     */\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var _path, data, signedURL;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _path = this._getFinalPath(path);\n                _context6.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), {\n                  expiresIn: expiresIn\n                }, {\n                  headers: this.headers\n                });\n              case 4:\n                data = _context6.sent;\n                signedURL = \"\".concat(this.url).concat(data.signedURL);\n                data = {\n                  signedURL: signedURL\n                };\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null,\n                  signedURL: signedURL\n                });\n              case 10:\n                _context6.prev = 10;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0,\n                  signedURL: null\n                });\n              case 13:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 10]]);\n      }));\n    }\n    /**\n     * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     */\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var _this = this;\n        var data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.prev = 0;\n                _context7.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                  expiresIn: expiresIn,\n                  paths: paths\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context7.sent;\n                return _context7.abrupt(\"return\", {\n                  data: data.map(function (datum) {\n                    return Object.assign(Object.assign({}, datum), {\n                      signedURL: datum.signedURL ? \"\".concat(_this.url).concat(datum.signedURL) : null\n                    });\n                  }),\n                  error: null\n                });\n              case 7:\n                _context7.prev = 7;\n                _context7.t0 = _context7[\"catch\"](0);\n                return _context7.abrupt(\"return\", {\n                  data: null,\n                  error: _context7.t0\n                });\n              case 10:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Downloads a file.\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n  }, {\n    key: \"download\",\n    value: function download(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, res, data;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.prev = 0;\n                _path = this._getFinalPath(path);\n                _context8.next = 4;\n                return get(this.fetch, \"\".concat(this.url, \"/object/\").concat(_path), {\n                  headers: this.headers,\n                  noResolveJson: true\n                });\n              case 4:\n                res = _context8.sent;\n                _context8.next = 7;\n                return res.blob();\n              case 7:\n                data = _context8.sent;\n                return _context8.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 11:\n                _context8.prev = 11;\n                _context8.t0 = _context8[\"catch\"](0);\n                return _context8.abrupt(\"return\", {\n                  data: null,\n                  error: _context8.t0\n                });\n              case 14:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Retrieve URLs for assets in public buckets\n     *\n     * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n     */\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path) {\n      try {\n        var _path = this._getFinalPath(path);\n        var publicURL = \"\".concat(this.url, \"/object/public/\").concat(_path);\n        var data = {\n          publicURL: publicURL\n        };\n        return {\n          data: data,\n          error: null,\n          publicURL: publicURL\n        };\n      } catch (error) {\n        return {\n          data: null,\n          error: error,\n          publicURL: null\n        };\n      }\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.prev = 0;\n                _context9.next = 3;\n                return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                  prefixes: paths\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context9.sent;\n                return _context9.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context9.prev = 7;\n                _context9.t0 = _context9[\"catch\"](0);\n                return _context9.abrupt(\"return\", {\n                  data: null,\n                  error: _context9.t0\n                });\n              case 10:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<{ data: Metadata | null; error: Error | null }> {\n    //   try {\n    //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     return { data: null, error }\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     * @param options Search options, including `limit`, `offset`, `sortBy`, and `search`.\n     * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n     */\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.prev = 0;\n                body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                  prefix: path || ''\n                });\n                _context10.next = 4;\n                return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                  headers: this.headers\n                }, parameters);\n              case 4:\n                data = _context10.sent;\n                return _context10.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 8:\n                _context10.prev = 8;\n                _context10.t0 = _context10[\"catch\"](0);\n                return _context10.abrupt(\"return\", {\n                  data: null,\n                  error: _context10.t0\n                });\n              case 11:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }]);\n  return StorageFileApi;\n}();","map":{"version":3,"names":["get","post","remove","resolveFetch","DEFAULT_SEARCH_OPTIONS","limit","offset","sortBy","column","order","DEFAULT_FILE_OPTIONS","cacheControl","contentType","upsert","StorageFileApi","url","headers","arguments","length","undefined","bucketId","fetch","_classCallCheck","_createClass","key","value","uploadOrUpdate","method","path","fileBody","fileOptions","options","Object","assign","String","Blob","body","FormData","append","concat","cleanPath","_removeEmptyFolders","_path","_getFinalPath","_context","next","res","sent","ok","abrupt","data","Key","error","json","prev","t0","stop","_callee","upload","_context2","_callee2","update","_context3","_callee3","move","fromPath","toPath","sourceKey","destinationKey","_context4","_callee4","copy","_context5","_callee5","createSignedUrl","expiresIn","_context6","signedURL","_callee6","createSignedUrls","paths","_context7","map","datum","_this","_callee7","download","_context8","noResolveJson","blob","_callee8","getPublicUrl","publicURL","prefixes","_context9","_callee9","list","parameters","prefix","_context10","_callee10","replace"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/storage-js/src/lib/StorageFileApi.ts"],"sourcesContent":["import { Fetch, FetchParameters, get, post, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { FileObject, FileOptions, SearchOptions } from './types'\n\nconst DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc',\n  },\n}\n\nconst DEFAULT_FILE_OPTIONS: FileOptions = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false,\n}\n\nexport class StorageFileApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected bucketId?: string\n  protected fetch: Fetch\n\n  constructor(\n    url: string,\n    headers: { [key: string]: string } = {},\n    bucketId?: string,\n    fetch?: Fetch\n  ) {\n    this.url = url\n    this.headers = headers\n    this.bucketId = bucketId\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  private async uploadOrUpdate(\n    method: 'POST' | 'PUT',\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    try {\n      let body\n      const options = { ...DEFAULT_FILE_OPTIONS, ...fileOptions }\n      const headers: Record<string, string> = {\n        ...this.headers,\n        ...(method === 'POST' && { 'x-upsert': String(options.upsert as boolean) }),\n      }\n\n      if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n        body = new FormData()\n        body.append('cacheControl', options.cacheControl as string)\n        body.append('', fileBody)\n      } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n        body = fileBody\n        body.append('cacheControl', options.cacheControl as string)\n      } else {\n        body = fileBody\n        headers['cache-control'] = `max-age=${options.cacheControl}`\n        headers['content-type'] = options.contentType as string\n      }\n\n      const cleanPath = this._removeEmptyFolders(path)\n      const _path = this._getFinalPath(cleanPath)\n      const res = await this.fetch(`${this.url}/object/${_path}`, {\n        method,\n        body: body as BodyInit,\n        headers,\n      })\n\n      if (res.ok) {\n        // const data = await res.json()\n        // temporary fix till backend is updated to the latest storage-api version\n        return { data: { Key: _path }, error: null }\n      } else {\n        const error = await res.json()\n        return { data: null, error }\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Uploads a file to an existing bucket.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async upload(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('POST', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Replaces an existing file at the specified path with a new one.\n   *\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   * @param fileOptions HTTP headers.\n   * `cacheControl`: string, the `Cache-Control: max-age=<seconds>` seconds value.\n   * `contentType`: string, the `Content-Type` header value. Should be specified if using a `fileBody` that is neither `Blob` nor `File` nor `FormData`, otherwise will default to `text/plain;charset=UTF-8`.\n   * `upsert`: boolean, whether to perform an upsert.\n   */\n  async update(\n    path: string,\n    fileBody:\n      | ArrayBuffer\n      | ArrayBufferView\n      | Blob\n      | Buffer\n      | File\n      | FormData\n      | NodeJS.ReadableStream\n      | ReadableStream<Uint8Array>\n      | URLSearchParams\n      | string,\n    fileOptions?: FileOptions\n  ): Promise<{ data: { Key: string } | null; error: Error | null }> {\n    return this.uploadOrUpdate('PUT', path, fileBody, fileOptions)\n  }\n\n  /**\n   * Moves an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n   */\n  async move(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/move`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Copies an existing file.\n   *\n   * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n   * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n   */\n  async copy(\n    fromPath: string,\n    toPath: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/copy`,\n        { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Create signed URL to download file without requiring permissions. This URL can be valid for a set number of seconds.\n   *\n   * @param path The file path to be downloaded, including the current file name. For example `folder/image.png`.\n   * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n   */\n  async createSignedUrl(\n    path: string,\n    expiresIn: number\n  ): Promise<{\n    data: { signedURL: string } | null\n    error: Error | null\n    signedURL: string | null\n  }> {\n    try {\n      const _path = this._getFinalPath(path)\n      let data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${_path}`,\n        { expiresIn },\n        { headers: this.headers }\n      )\n      const signedURL = `${this.url}${data.signedURL}`\n      data = { signedURL }\n      return { data, error: null, signedURL }\n    } catch (error) {\n      return { data: null, error, signedURL: null }\n    }\n  }\n\n  /**\n   * Create signed URLs to download files without requiring permissions. These URLs can be valid for a set number of seconds.\n   *\n   * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n   * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n   */\n  async createSignedUrls(\n    paths: string[],\n    expiresIn: number\n  ): Promise<{\n    data: { error: string | null; path: string | null; signedURL: string }[] | null\n    error: Error | null\n  }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/sign/${this.bucketId}`,\n        { expiresIn, paths },\n        { headers: this.headers }\n      )\n      return {\n        data: data.map((datum: { signedURL: string }) => ({\n          ...datum,\n          signedURL: datum.signedURL ? `${this.url}${datum.signedURL}` : null,\n        })),\n        error: null,\n      }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Downloads a file.\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  async download(path: string): Promise<{ data: Blob | null; error: Error | null }> {\n    try {\n      const _path = this._getFinalPath(path)\n      const res = await get(this.fetch, `${this.url}/object/${_path}`, {\n        headers: this.headers,\n        noResolveJson: true,\n      })\n      const data = await res.blob()\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieve URLs for assets in public buckets\n   *\n   * @param path The file path to be downloaded, including the path and file name. For example `folder/image.png`.\n   */\n  getPublicUrl(\n    path: string\n  ): {\n    data: { publicURL: string } | null\n    error: Error | null\n    publicURL: string | null\n  } {\n    try {\n      const _path = this._getFinalPath(path)\n      const publicURL = `${this.url}/object/public/${_path}`\n      const data = { publicURL }\n      return { data, error: null, publicURL }\n    } catch (error) {\n      return { data: null, error, publicURL: null }\n    }\n  }\n\n  /**\n   * Deletes files within the same bucket\n   *\n   * @param paths An array of files to be deleted, including the path and file name. For example [`folder/image.png`].\n   */\n  async remove(paths: string[]): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/object/${this.bucketId}`,\n        { prefixes: paths },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Get file metadata\n   * @param id the file id to retrieve metadata\n   */\n  // async getMetadata(id: string): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await get(`${this.url}/metadata/${id}`, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Update file metadata\n   * @param id the file id to update metadata\n   * @param meta the new file metadata\n   */\n  // async updateMetadata(\n  //   id: string,\n  //   meta: Metadata\n  // ): Promise<{ data: Metadata | null; error: Error | null }> {\n  //   try {\n  //     const data = await post(`${this.url}/metadata/${id}`, { ...meta }, { headers: this.headers })\n  //     return { data, error: null }\n  //   } catch (error) {\n  //     return { data: null, error }\n  //   }\n  // }\n\n  /**\n   * Lists all the files within a bucket.\n   * @param path The folder path.\n   * @param options Search options, including `limit`, `offset`, `sortBy`, and `search`.\n   * @param parameters Fetch parameters, currently only supports `signal`, which is an AbortController's signal\n   */\n  async list(\n    path?: string,\n    options?: SearchOptions,\n    parameters?: FetchParameters\n  ): Promise<{ data: FileObject[] | null; error: Error | null }> {\n    try {\n      const body = { ...DEFAULT_SEARCH_OPTIONS, ...options, prefix: path || '' }\n      const data = await post(\n        this.fetch,\n        `${this.url}/object/list/${this.bucketId}`,\n        body,\n        { headers: this.headers },\n        parameters\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  _getFinalPath(path: string) {\n    return `${this.bucketId}/${path}`\n  }\n\n  _removeEmptyFolders(path: string) {\n    return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/')\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}