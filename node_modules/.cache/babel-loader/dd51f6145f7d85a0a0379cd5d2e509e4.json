{"ast":null,"code":"import _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport PostgrestQueryBuilder from './lib/PostgrestQueryBuilder';\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder';\nimport { DEFAULT_HEADERS } from './lib/constants';\nvar PostgrestClient = /*#__PURE__*/function () {\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  function PostgrestClient(url) {\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$headers = _ref.headers,\n      headers = _ref$headers === void 0 ? {} : _ref$headers,\n      schema = _ref.schema,\n      fetch = _ref.fetch,\n      throwOnError = _ref.throwOnError;\n    _classCallCheck(this, PostgrestClient);\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.schema = schema;\n    this.fetch = fetch;\n    this.shouldThrowOnError = throwOnError;\n  }\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  _createClass(PostgrestClient, [{\n    key: \"auth\",\n    value: function auth(token) {\n      this.headers['Authorization'] = \"Bearer \".concat(token);\n      return this;\n    }\n    /**\n     * Perform a table operation.\n     *\n     * @param table  The table name to operate on.\n     */\n  }, {\n    key: \"from\",\n    value: function from(table) {\n      var url = \"\".concat(this.url, \"/\").concat(table);\n      return new PostgrestQueryBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      });\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param params  The parameters to pass to the function call.\n     * @param head  When set to true, no data will be returned.\n     * @param count  Count algorithm to use to count rows in a table.\n     */\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn, params) {\n      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n        _ref2$head = _ref2.head,\n        head = _ref2$head === void 0 ? false : _ref2$head,\n        _ref2$count = _ref2.count,\n        count = _ref2$count === void 0 ? null : _ref2$count;\n      var url = \"\".concat(this.url, \"/rpc/\").concat(fn);\n      return new PostgrestRpcBuilder(url, {\n        headers: this.headers,\n        schema: this.schema,\n        fetch: this.fetch,\n        shouldThrowOnError: this.shouldThrowOnError\n      }).rpc(params, {\n        head: head,\n        count: count\n      });\n    }\n  }]);\n  return PostgrestClient;\n}();\nexport { PostgrestClient as default };","map":{"version":3,"names":["PostgrestQueryBuilder","PostgrestRpcBuilder","DEFAULT_HEADERS","PostgrestClient","url","_ref","arguments","length","undefined","_ref$headers","headers","schema","fetch","throwOnError","_classCallCheck","Object","assign","shouldThrowOnError","_createClass","key","value","auth","token","concat","from","table","rpc","fn","params","_ref2","_ref2$head","head","_ref2$count","count","default"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/postgrest-js/src/PostgrestClient.ts"],"sourcesContent":["import PostgrestQueryBuilder from './lib/PostgrestQueryBuilder'\nimport PostgrestRpcBuilder from './lib/PostgrestRpcBuilder'\nimport PostgrestFilterBuilder from './lib/PostgrestFilterBuilder'\nimport { DEFAULT_HEADERS } from './lib/constants'\nimport { Fetch } from './lib/types'\n\nexport default class PostgrestClient {\n  url: string\n  headers: { [key: string]: string }\n  schema?: string\n  fetch?: Fetch\n  shouldThrowOnError?: boolean\n\n  /**\n   * Creates a PostgREST client.\n   *\n   * @param url  URL of the PostgREST endpoint.\n   * @param headers  Custom headers.\n   * @param schema  Postgres schema to switch to.\n   */\n  constructor(\n    url: string,\n    {\n      headers = {},\n      schema,\n      fetch,\n      throwOnError,\n    }: {\n      headers?: { [key: string]: string }\n      schema?: string\n      fetch?: Fetch\n      throwOnError?: boolean\n    } = {}\n  ) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.schema = schema\n    this.fetch = fetch\n    this.shouldThrowOnError = throwOnError\n  }\n\n  /**\n   * Authenticates the request with JWT.\n   *\n   * @param token  The JWT token to use.\n   */\n  auth(token: string): this {\n    this.headers['Authorization'] = `Bearer ${token}`\n    return this\n  }\n\n  /**\n   * Perform a table operation.\n   *\n   * @param table  The table name to operate on.\n   */\n  from<T = any>(table: string): PostgrestQueryBuilder<T> {\n    const url = `${this.url}/${table}`\n    return new PostgrestQueryBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    })\n  }\n\n  /**\n   * Perform a function call.\n   *\n   * @param fn  The function name to call.\n   * @param params  The parameters to pass to the function call.\n   * @param head  When set to true, no data will be returned.\n   * @param count  Count algorithm to use to count rows in a table.\n   */\n  rpc<T = any>(\n    fn: string,\n    params?: object,\n    {\n      head = false,\n      count = null,\n    }: {\n      head?: boolean\n      count?: null | 'exact' | 'planned' | 'estimated'\n    } = {}\n  ): PostgrestFilterBuilder<T> {\n    const url = `${this.url}/rpc/${fn}`\n    return new PostgrestRpcBuilder<T>(url, {\n      headers: this.headers,\n      schema: this.schema,\n      fetch: this.fetch,\n      shouldThrowOnError: this.shouldThrowOnError,\n    }).rpc(params, { head, count })\n  }\n}\n"],"mappings":";;AAAA,OAAOA,qBAAqB,MAAM,6BAA6B;AAC/D,OAAOC,mBAAmB,MAAM,2BAA2B;AAE3D,SAASC,eAAe,QAAQ,iBAAiB;AAAA,IAG5BC,eAAe;EAOlC;;;;;;;EAOA,SAAAA,gBACEC,GAAW,EAWL;IAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;MAAAG,YAAA,GAAAJ,IAAA,CATJK,OAAO;MAAPA,OAAO,GAAAD,YAAA,cAAG,EAAE,GAAAA,YAAA;MACZE,MAAM,GAAAN,IAAA,CAANM,MAAM;MACNC,KAAK,GAAAP,IAAA,CAALO,KAAK;MACLC,YAAY,GAAAR,IAAA,CAAZQ,YAAY;IAAAC,eAAA,OAAAX,eAAA;IAQd,IAAI,CAACC,GAAG,GAAGA,GAAG;IACd,IAAI,CAACM,OAAO,GAAAK,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAAQd,eAAe,GAAKQ,OAAO,CAAE;IACjD,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACK,kBAAkB,GAAGJ,YAAY;EACxC;EAEA;;;;;EAAAK,YAAA,CAAAf,eAAA;IAAAgB,GAAA;IAAAC,KAAA,EAKA,SAAAC,KAAKC,KAAa;MAChB,IAAI,CAACZ,OAAO,CAAC,eAAe,CAAC,aAAAa,MAAA,CAAaD,KAAK,CAAE;MACjD,OAAO,IAAI;IACb;IAEA;;;;;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAKA,SAAAI,KAAcC,KAAa;MACzB,IAAMrB,GAAG,MAAAmB,MAAA,CAAM,IAAI,CAACnB,GAAG,OAAAmB,MAAA,CAAIE,KAAK,CAAE;MAClC,OAAO,IAAIzB,qBAAqB,CAAII,GAAG,EAAE;QACvCM,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBK,kBAAkB,EAAE,IAAI,CAACA;OAC1B,CAAC;IACJ;IAEA;;;;;;;;EAAA;IAAAE,GAAA;IAAAC,KAAA,EAQA,SAAAM,IACEC,EAAU,EACVC,MAAe,EAOT;MAAA,IAAAC,KAAA,GAAAvB,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;QAAAwB,UAAA,GAAAD,KAAA,CALJE,IAAI;QAAJA,IAAI,GAAAD,UAAA,cAAG,KAAK,GAAAA,UAAA;QAAAE,WAAA,GAAAH,KAAA,CACZI,KAAK;QAALA,KAAK,GAAAD,WAAA,cAAG,IAAI,GAAAA,WAAA;MAMd,IAAM5B,GAAG,MAAAmB,MAAA,CAAM,IAAI,CAACnB,GAAG,WAAAmB,MAAA,CAAQI,EAAE,CAAE;MACnC,OAAO,IAAI1B,mBAAmB,CAAIG,GAAG,EAAE;QACrCM,OAAO,EAAE,IAAI,CAACA,OAAO;QACrBC,MAAM,EAAE,IAAI,CAACA,MAAM;QACnBC,KAAK,EAAE,IAAI,CAACA,KAAK;QACjBK,kBAAkB,EAAE,IAAI,CAACA;OAC1B,CAAC,CAACS,GAAG,CAACE,MAAM,EAAE;QAAEG,IAAI,EAAJA,IAAI;QAAEE,KAAK,EAALA;MAAK,CAAE,CAAC;IACjC;EAAC;EAAA,OAAA9B,eAAA;AAAA;AAAA,SAtFkBA,eAAe,IAAA+B,OAAA"},"metadata":{},"sourceType":"module"}