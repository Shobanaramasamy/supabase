{"ast":null,"code":"import _regeneratorRuntime from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mako/Downloads/todo_supabase/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_HEADERS } from './constants';\nimport { get, post, put, remove } from './fetch';\nimport { resolveFetch } from './helpers';\nexport var StorageBucketApi = /*#__PURE__*/function () {\n  function StorageBucketApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var fetch = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, StorageBucketApi);\n    this.url = url;\n    this.headers = Object.assign(Object.assign({}, DEFAULT_HEADERS), headers);\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  _createClass(StorageBucketApi, [{\n    key: \"listBuckets\",\n    value: function listBuckets() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context.sent;\n                return _context.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                return _context.abrupt(\"return\", {\n                  data: null,\n                  error: _context.t0\n                });\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Retrieves the details of an existing Storage bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to retrieve.\n     */\n  }, {\n    key: \"getBucket\",\n    value: function getBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return get(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context2.sent;\n                return _context2.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", {\n                  data: null,\n                  error: _context2.t0\n                });\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are creating.\n     * @returns newly created bucket id\n     */\n  }, {\n    key: \"createBucket\",\n    value: function createBucket(id) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        public: false\n      };\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket\"), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context3.sent;\n                return _context3.abrupt(\"return\", {\n                  data: data.name,\n                  error: null\n                });\n              case 7:\n                _context3.prev = 7;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", {\n                  data: null,\n                  error: _context3.t0\n                });\n              case 10:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Updates a new Storage bucket\n     *\n     * @param id A unique identifier for the bucket you are updating.\n     */\n  }, {\n    key: \"updateBucket\",\n    value: function updateBucket(id, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return put(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {\n                  id: id,\n                  name: id,\n                  public: options.public\n                }, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context4.sent;\n                return _context4.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n                return _context4.abrupt(\"return\", {\n                  data: null,\n                  error: _context4.t0\n                });\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Removes all objects inside a single bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to empty.\n     */\n  }, {\n    key: \"emptyBucket\",\n    value: function emptyBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return post(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id, \"/empty\"), {}, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context5.sent;\n                return _context5.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context5.prev = 7;\n                _context5.t0 = _context5[\"catch\"](0);\n                return _context5.abrupt(\"return\", {\n                  data: null,\n                  error: _context5.t0\n                });\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n     * You must first `empty()` the bucket.\n     *\n     * @param id The unique identifier of the bucket you would like to delete.\n     */\n  }, {\n    key: \"deleteBucket\",\n    value: function deleteBucket(id) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return remove(this.fetch, \"\".concat(this.url, \"/bucket/\").concat(id), {}, {\n                  headers: this.headers\n                });\n              case 3:\n                data = _context6.sent;\n                return _context6.abrupt(\"return\", {\n                  data: data,\n                  error: null\n                });\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                return _context6.abrupt(\"return\", {\n                  data: null,\n                  error: _context6.t0\n                });\n              case 10:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n  }]);\n  return StorageBucketApi;\n}();","map":{"version":3,"names":["DEFAULT_HEADERS","get","post","put","remove","resolveFetch","StorageBucketApi","url","headers","arguments","length","undefined","fetch","_classCallCheck","Object","assign","_createClass","key","value","listBuckets","concat","data","_context","sent","abrupt","error","prev","t0","stop","_callee","getBucket","id","_context2","_callee2","createBucket","options","public","name","_context3","_callee3","updateBucket","_context4","_callee4","emptyBucket","_context5","_callee5","deleteBucket","_context6","_callee6"],"sources":["/Users/mako/Downloads/todo_supabase/node_modules/@supabase/storage-js/src/lib/StorageBucketApi.ts"],"sourcesContent":["import { DEFAULT_HEADERS } from './constants'\nimport { Fetch, get, post, put, remove } from './fetch'\nimport { resolveFetch } from './helpers'\nimport { Bucket } from './types'\n\nexport class StorageBucketApi {\n  protected url: string\n  protected headers: { [key: string]: string }\n  protected fetch: Fetch\n\n  constructor(url: string, headers: { [key: string]: string } = {}, fetch?: Fetch) {\n    this.url = url\n    this.headers = { ...DEFAULT_HEADERS, ...headers }\n    this.fetch = resolveFetch(fetch)\n  }\n\n  /**\n   * Retrieves the details of all Storage buckets within an existing project.\n   */\n  async listBuckets(): Promise<{ data: Bucket[] | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Retrieves the details of an existing Storage bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to retrieve.\n   */\n  async getBucket(id: string): Promise<{ data: Bucket | null; error: Error | null }> {\n    try {\n      const data = await get(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers })\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Creates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are creating.\n   * @returns newly created bucket id\n   */\n  async createBucket(\n    id: string,\n    options: { public: boolean } = { public: false }\n  ): Promise<{ data: string | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data: data.name, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Updates a new Storage bucket\n   *\n   * @param id A unique identifier for the bucket you are updating.\n   */\n  async updateBucket(\n    id: string,\n    options: { public: boolean }\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await put(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        { id, name: id, public: options.public },\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Removes all objects inside a single bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to empty.\n   */\n  async emptyBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await post(\n        this.fetch,\n        `${this.url}/bucket/${id}/empty`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n\n  /**\n   * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\n   * You must first `empty()` the bucket.\n   *\n   * @param id The unique identifier of the bucket you would like to delete.\n   */\n  async deleteBucket(\n    id: string\n  ): Promise<{ data: { message: string } | null; error: Error | null }> {\n    try {\n      const data = await remove(\n        this.fetch,\n        `${this.url}/bucket/${id}`,\n        {},\n        { headers: this.headers }\n      )\n      return { data, error: null }\n    } catch (error) {\n      return { data: null, error }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}