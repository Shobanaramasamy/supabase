{"ast":null,"code":"/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport default class RealtimePresence {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeSubscription\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(channel, opts) {\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: () => {},\n      onLeave: () => {},\n      onSync: () => {}\n    };\n    const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel.on(events.state, {}, newState => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      this.joinRef = this.channel.joinRef();\n      this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n      this.pendingDiffs.forEach(diff => {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n      });\n      this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel.on(events.diff, {}, diff => {\n      const {\n        onJoin,\n        onLeave,\n        onSync\n      } = this.caller;\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff);\n      } else {\n        this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   */\n  static syncState(currentState, newState, onJoin, onLeave) {\n    const state = this.cloneDeep(currentState);\n    const transformedState = this.transformState(newState);\n    const joins = {};\n    const leaves = {};\n    this.map(state, (key, presences) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences;\n      }\n    });\n    this.map(transformedState, (key, newPresences) => {\n      const currentPresences = state[key];\n      if (currentPresences) {\n        const newPresenceIds = newPresences.map(m => m.presence_id);\n        const curPresenceIds = currentPresences.map(m => m.presence_id);\n        const joinedPresences = newPresences.filter(m => curPresenceIds.indexOf(m.presence_id) < 0);\n        const leftPresences = currentPresences.filter(m => newPresenceIds.indexOf(m.presence_id) < 0);\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences;\n        }\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences;\n        }\n      } else {\n        joins[key] = newPresences;\n      }\n    });\n    return this.syncDiff(state, {\n      joins,\n      leaves\n    }, onJoin, onLeave);\n  }\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   */\n  static syncDiff(state, diff, onJoin, onLeave) {\n    const {\n      joins,\n      leaves\n    } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves)\n    };\n    if (!onJoin) {\n      onJoin = () => {};\n    }\n    if (!onLeave) {\n      onLeave = () => {};\n    }\n    this.map(joins, (key, newPresences) => {\n      const currentPresences = state[key];\n      state[key] = this.cloneDeep(newPresences);\n      if (currentPresences) {\n        const joinedPresenceIds = state[key].map(m => m.presence_id);\n        const curPresences = currentPresences.filter(m => joinedPresenceIds.indexOf(m.presence_id) < 0);\n        state[key].unshift(...curPresences);\n      }\n      onJoin(key, currentPresences, newPresences);\n    });\n    this.map(leaves, (key, leftPresences) => {\n      let currentPresences = state[key];\n      if (!currentPresences) return;\n      const presenceIdsToRemove = leftPresences.map(m => m.presence_id);\n      currentPresences = currentPresences.filter(m => presenceIdsToRemove.indexOf(m.presence_id) < 0);\n      state[key] = currentPresences;\n      onLeave(key, currentPresences, leftPresences);\n      if (currentPresences.length === 0) delete state[key];\n    });\n    return state;\n  }\n  /**\n   * Returns the array of presences, with selected metadata.\n   */\n  static list(presences, chooser) {\n    if (!chooser) {\n      chooser = (_key, pres) => pres;\n    }\n    return this.map(presences, (key, presences) => chooser(key, presences));\n  }\n  static map(obj, func) {\n    return Object.getOwnPropertyNames(obj).map(key => func(key, obj[key]));\n  }\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_id'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_id: '2', user_id: 1 },\n   *    { presence_id: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   */\n  static transformState(state) {\n    state = this.cloneDeep(state);\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key];\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map(presence => {\n          presence['presence_id'] = presence['phx_ref'];\n          delete presence['phx_ref'];\n          delete presence['phx_ref_prev'];\n          return presence;\n        });\n      } else {\n        newState[key] = presences;\n      }\n      return newState;\n    }, {});\n  }\n  static cloneDeep(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n  onJoin(callback) {\n    this.caller.onJoin = callback;\n  }\n  onLeave(callback) {\n    this.caller.onLeave = callback;\n  }\n  onSync(callback) {\n    this.caller.onSync = callback;\n  }\n  list(by) {\n    return RealtimePresence.list(this.state, by);\n  }\n  inPendingSyncState() {\n    return !this.joinRef || this.joinRef !== this.channel.joinRef();\n  }\n}","map":{"version":3,"names":["RealtimePresence","constructor","channel","opts","state","pendingDiffs","joinRef","caller","onJoin","onLeave","onSync","events","diff","on","newState","syncState","forEach","syncDiff","inPendingSyncState","push","currentState","cloneDeep","transformedState","transformState","joins","leaves","map","key","presences","newPresences","currentPresences","newPresenceIds","m","presence_id","curPresenceIds","joinedPresences","filter","indexOf","leftPresences","length","joinedPresenceIds","curPresences","unshift","presenceIdsToRemove","list","chooser","_key","pres","obj","func","Object","getOwnPropertyNames","reduce","metas","presence","JSON","parse","stringify","callback","by"],"sources":["/Users/mako/Downloads/supabase-todo-main/node_modules/@supabase/realtime-js/src/RealtimePresence.ts"],"sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\n\nimport {\n  PresenceOpts,\n  PresenceOnJoinCallback,\n  PresenceOnLeaveCallback,\n} from 'phoenix'\nimport RealtimeChannel from './RealtimeChannel'\n\ntype Presence = {\n  presence_id: string\n  [key: string]: any\n}\n\ntype PresenceState = { [key: string]: Presence[] }\n\ntype PresenceDiff = {\n  joins: PresenceState\n  leaves: PresenceState\n}\n\ntype RawPresenceState = {\n  [key: string]: Record<\n    'metas',\n    {\n      phx_ref?: string\n      phx_ref_prev?: string\n      [key: string]: any\n    }[]\n  >\n}\n\ntype RawPresenceDiff = {\n  joins: RawPresenceState\n  leaves: RawPresenceState\n}\n\ntype PresenceChooser<T> = (key: string, presences: any) => T\n\nexport default class RealtimePresence {\n  state: PresenceState = {}\n  pendingDiffs: RawPresenceDiff[] = []\n  joinRef: string | null = null\n  caller: {\n    onJoin: PresenceOnJoinCallback\n    onLeave: PresenceOnLeaveCallback\n    onSync: () => void\n  } = {\n    onJoin: () => {},\n    onLeave: () => {},\n    onSync: () => {},\n  }\n\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeSubscription\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  constructor(public channel: RealtimeChannel, opts?: PresenceOpts) {\n    const events = opts?.events || {\n      state: 'presence_state',\n      diff: 'presence_diff',\n    }\n\n    this.channel.on(events.state, {}, (newState: RawPresenceState) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      this.joinRef = this.channel.joinRef()\n\n      this.state = RealtimePresence.syncState(\n        this.state,\n        newState,\n        onJoin,\n        onLeave\n      )\n\n      this.pendingDiffs.forEach((diff) => {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n      })\n\n      this.pendingDiffs = []\n\n      onSync()\n    })\n\n    this.channel.on(events.diff, {}, (diff: RawPresenceDiff) => {\n      const { onJoin, onLeave, onSync } = this.caller\n\n      if (this.inPendingSyncState()) {\n        this.pendingDiffs.push(diff)\n      } else {\n        this.state = RealtimePresence.syncDiff(\n          this.state,\n          diff,\n          onJoin,\n          onLeave\n        )\n\n        onSync()\n      }\n    })\n  }\n\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   */\n  static syncState(\n    currentState: PresenceState,\n    newState: RawPresenceState | PresenceState,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): PresenceState {\n    const state = this.cloneDeep(currentState)\n    const transformedState = this.transformState(newState)\n    const joins: PresenceState = {}\n    const leaves: PresenceState = {}\n\n    this.map(state, (key: string, presences: Presence[]) => {\n      if (!transformedState[key]) {\n        leaves[key] = presences\n      }\n    })\n\n    this.map(transformedState, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n\n      if (currentPresences) {\n        const newPresenceIds = newPresences.map((m: Presence) => m.presence_id)\n        const curPresenceIds = currentPresences.map(\n          (m: Presence) => m.presence_id\n        )\n        const joinedPresences: Presence[] = newPresences.filter(\n          (m: Presence) => curPresenceIds.indexOf(m.presence_id) < 0\n        )\n        const leftPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => newPresenceIds.indexOf(m.presence_id) < 0\n        )\n\n        if (joinedPresences.length > 0) {\n          joins[key] = joinedPresences\n        }\n\n        if (leftPresences.length > 0) {\n          leaves[key] = leftPresences\n        }\n      } else {\n        joins[key] = newPresences\n      }\n    })\n\n    return this.syncDiff(state, { joins, leaves }, onJoin, onLeave)\n  }\n\n  /**\n   * Used to sync a diff of presence join and leave events from the\n   * server, as they happen.\n   *\n   * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n   * `onLeave` callbacks to react to a user joining or leaving from a\n   * device.\n   */\n  static syncDiff(\n    state: PresenceState,\n    diff: RawPresenceDiff | PresenceDiff,\n    onJoin: PresenceOnJoinCallback,\n    onLeave: PresenceOnLeaveCallback\n  ): PresenceState {\n    const { joins, leaves } = {\n      joins: this.transformState(diff.joins),\n      leaves: this.transformState(diff.leaves),\n    }\n\n    if (!onJoin) {\n      onJoin = () => {}\n    }\n\n    if (!onLeave) {\n      onLeave = () => {}\n    }\n\n    this.map(joins, (key, newPresences: Presence[]) => {\n      const currentPresences: Presence[] = state[key]\n      state[key] = this.cloneDeep(newPresences)\n\n      if (currentPresences) {\n        const joinedPresenceIds = state[key].map((m: Presence) => m.presence_id)\n        const curPresences: Presence[] = currentPresences.filter(\n          (m: Presence) => joinedPresenceIds.indexOf(m.presence_id) < 0\n        )\n\n        state[key].unshift(...curPresences)\n      }\n\n      onJoin(key, currentPresences, newPresences)\n    })\n\n    this.map(leaves, (key, leftPresences: Presence[]) => {\n      let currentPresences: Presence[] = state[key]\n\n      if (!currentPresences) return\n\n      const presenceIdsToRemove = leftPresences.map(\n        (m: Presence) => m.presence_id\n      )\n      currentPresences = currentPresences.filter(\n        (m: Presence) => presenceIdsToRemove.indexOf(m.presence_id) < 0\n      )\n\n      state[key] = currentPresences\n\n      onLeave(key, currentPresences, leftPresences)\n\n      if (currentPresences.length === 0) delete state[key]\n    })\n\n    return state\n  }\n\n  /**\n   * Returns the array of presences, with selected metadata.\n   */\n  static list<T = any>(\n    presences: PresenceState,\n    chooser: PresenceChooser<T> | undefined\n  ): T[] {\n    if (!chooser) {\n      chooser = (_key, pres) => pres\n    }\n\n    return this.map(presences, (key, presences: Presence[]) =>\n      chooser!(key, presences)\n    )\n  }\n\n  private static map<T = any>(\n    obj: PresenceState,\n    func: PresenceChooser<T>\n  ): T[] {\n    return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]))\n  }\n\n  /**\n   * Remove 'metas' key\n   * Change 'phx_ref' to 'presence_id'\n   * Remove 'phx_ref' and 'phx_ref_prev'\n   *\n   * @example\n   * // returns {\n   *  abc123: [\n   *    { presence_id: '2', user_id: 1 },\n   *    { presence_id: '3', user_id: 2 }\n   *  ]\n   * }\n   * RealtimePresence.transformState({\n   *  abc123: {\n   *    metas: [\n   *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n   *      { phx_ref: '3', user_id: 2 }\n   *    ]\n   *  }\n   * })\n   */\n  private static transformState(\n    state: RawPresenceState | PresenceState\n  ): PresenceState {\n    state = this.cloneDeep(state)\n\n    return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n      const presences = state[key]\n\n      if ('metas' in presences) {\n        newState[key] = presences.metas.map((presence) => {\n          presence['presence_id'] = presence['phx_ref']\n\n          delete presence['phx_ref']\n          delete presence['phx_ref_prev']\n\n          return presence\n        }) as Presence[]\n      } else {\n        newState[key] = presences\n      }\n\n      return newState\n    }, {} as PresenceState)\n  }\n\n  private static cloneDeep(obj: object) {\n    return JSON.parse(JSON.stringify(obj))\n  }\n\n  onJoin(callback: PresenceOnJoinCallback): void {\n    this.caller.onJoin = callback\n  }\n\n  onLeave(callback: PresenceOnLeaveCallback): void {\n    this.caller.onLeave = callback\n  }\n\n  onSync(callback: () => void): void {\n    this.caller.onSync = callback\n  }\n\n  list<T = any>(by?: PresenceChooser<T>): T[] {\n    return RealtimePresence.list<T>(this.state, by)\n  }\n\n  private inPendingSyncState(): boolean {\n    return !this.joinRef || this.joinRef !== this.channel.joinRef()\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}