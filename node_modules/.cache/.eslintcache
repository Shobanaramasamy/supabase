[{"/Users/mako/Downloads/todo_supabase/src/index.js":"1","/Users/mako/Downloads/todo_supabase/src/supabase.js":"2","/Users/mako/Downloads/todo_supabase/src/App.js":"3","/Users/mako/Downloads/todo_supabase/src/components/AddTask.js":"4","/Users/mako/Downloads/todo_supabase/src/components/TaskList.js":"5","/Users/mako/Downloads/todo_supabase/src/components/login.js":"6","/Users/mako/Downloads/todo_supabase/src/components/ClearTasks.js":"7","/Users/mako/Downloads/todo_supabase/src/components/DeleteTask.js":"8","/Users/mako/Downloads/todo_supabase/src/components/EditTask.js":"9"},{"size":534,"mtime":1688729493372,"results":"10","hashOfConfig":"11"},{"size":236,"mtime":1688810891567,"results":"12","hashOfConfig":"11"},{"size":865,"mtime":1688995791795,"results":"13","hashOfConfig":"11"},{"size":1221,"mtime":1688997157929,"results":"14","hashOfConfig":"11"},{"size":1423,"mtime":1688972317609,"results":"15","hashOfConfig":"11"},{"size":1982,"mtime":1688996970572,"results":"16","hashOfConfig":"11"},{"size":1002,"mtime":1656313277000,"results":"17","hashOfConfig":"11"},{"size":773,"mtime":1656313277000,"results":"18","hashOfConfig":"11"},{"size":2120,"mtime":1688818545527,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b1ykd5",{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},"/Users/mako/Downloads/todo_supabase/src/index.js",[],[],"/Users/mako/Downloads/todo_supabase/src/supabase.js",[],[],"/Users/mako/Downloads/todo_supabase/src/App.js",[],[],[],"/Users/mako/Downloads/todo_supabase/src/components/AddTask.js",[],[],"/Users/mako/Downloads/todo_supabase/src/components/TaskList.js",["53","54","55"],[],"import {\n  VStack,\n  StackDivider,\n  HStack,\n  Text,\n  Image,\n  Box,\n  Skeleton,\n  useToast\n} from '@chakra-ui/react';\nimport DeleteTask from './DeleteTask';\nimport ClearTasks from './ClearTasks';\nimport img from '../images/empty.jpeg';\nimport EditTask from './EditTask'\nimport { useRealtime } from 'react-supabase';\n\nexport default function TaskList() {\n  const [result, reexecute] = useRealtime('todos');\n  const { data: tasks, error, fetching } = result;\nconsole.log(\"tasks\",tasks)\n  if (fetching) {\n    return (\n      <Skeleton\n        width={{ base: '90vw', sm: '80vw', lg: '50vw', xl: '30vw' }}\n        height=\"300px\"\n        rounded=\"md\"\n      />\n    );\n  }\n\n  if (!tasks || !tasks.length) {\n    return (\n      <Box align=\"center\">\n        <Image src={img} mt=\"30px\" maxW=\"95%\" />\n      </Box>\n    );\n  }\n\n  return (\n    <>\n      <VStack\n        divider={<StackDivider />}\n        borderColor=\"gray.100\"\n        borderWidth=\"2px\"\n        p=\"5\"\n        borderRadius=\"lg\"\n        w=\"100%\"\n        maxW={{ base: '90vw', sm: '80vw', lg: '50vw', xl: '30vw' }}\n        alignItems=\"stretch\"\n      >\n        {tasks.map(task => (\n          <HStack key={task.id}>\n            <Text w=\"100%\" p=\"8px\" borderRadius=\"lg\">\n              {task.text}\n            </Text>\n            <DeleteTask id={task.id} />\n            <EditTask id={task.id} />\n          </HStack>\n        ))}\n      </VStack>\n\n      <ClearTasks />\n    </>\n  );\n}","/Users/mako/Downloads/todo_supabase/src/components/login.js",[],[],[],"/Users/mako/Downloads/todo_supabase/src/components/ClearTasks.js",["56"],[],"import { Flex, Button, useToast } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport supabase from '../supabase';\n\nexport default function ClearTasks() {\n  const toast = useToast();\n  const [loading, setLoading] = useState(false);\n\n  async function handleDelete() {\n    if (!window.confirm('Are you sure you want to clear all tasks?')) return;\n\n    setLoading(true);\n    const { data, error } = await supabase\n      .from('todos')\n      .delete()\n      .not('text', 'eq', 'Do not delete me');\n    setLoading(false);\n\n    toast({\n      title: error || 'Tasks cleared!',\n      position: 'top',\n      status: error ? 'error' : 'success',\n      duration: 2000,\n      isClosable: true,\n    });\n  }\n\n  return (\n    <Flex>\n      <Button\n        colorScheme=\"gray\"\n        px=\"8\"\n        h=\"45\"\n        color=\"gray.500\"\n        mt=\"10\"\n        onClick={handleDelete}\n        isLoading={loading}\n        loadingText=\"Clearing tasks\"\n      >\n        Clear Tasks\n      </Button>\n    </Flex>\n  );\n}\n","/Users/mako/Downloads/todo_supabase/src/components/DeleteTask.js",["57"],[],"import { IconButton, useToast } from '@chakra-ui/react';\nimport { useState } from 'react';\nimport { FiTrash2 } from 'react-icons/fi';\nimport supabase from '../supabase';\n\nexport default function DeleteTask({ id }) {\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  async function handleDelete() {\n    setLoading(true);\n    const { data, error } = await supabase.from('todos').delete().eq('id', id);\n    setLoading(false);\n\n    toast({\n      title: error || 'Task deleted!',\n      position: 'top',\n      status: error ? 'error' : 'success',\n      duration: 2000,\n      isClosable: true,\n    });\n  }\n\n  return (\n    <IconButton\n      isRound=\"true\"\n      icon={<FiTrash2 />}\n      onClick={handleDelete}\n      isLoading={loading}\n    />\n  );\n}\n","/Users/mako/Downloads/todo_supabase/src/components/EditTask.js",["58"],[],"import React, { useState } from 'react';\nimport { IconButton, Input, useToast, AlertDialog, AlertDialogOverlay, AlertDialogContent, AlertDialogHeader, AlertDialogBody, AlertDialogFooter, Button } from '@chakra-ui/react';\nimport supabase from '../supabase';\nimport { FiEdit } from 'react-icons/fi';\n\nexport default function EditTask({ id }) {\n  const [text, setText] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [isConfirmationOpen, setIsConfirmationOpen] = useState(false);\n  const cancelRef = React.useRef();\n  const toast = useToast();\n\n  async function handleSubmit() {\n    setIsConfirmationOpen(false);\n\n    setLoading(true);\n    const { data, error } = await supabase.from('todos').update({ text }).eq('id', id).select();\n\n    setLoading(false);\n    setText('');\n\n    toast({\n      title: error || 'Task updated!',\n      position: 'top',\n      status: error ? 'error' : 'success',\n      duration: 2000,\n      isClosable: true,\n    });\n  }\n\n \n\n  return (\n    <>\n      <IconButton\n        isRound\n        icon={<FiEdit />}\n        onClick={() => setIsConfirmationOpen(true)}\n        isLoading={loading}\n      />\n\n      <AlertDialog\n        isOpen={isConfirmationOpen}\n        leastDestructiveRef={cancelRef}\n        onClose={() => setIsConfirmationOpen(false)}\n      >\n        <AlertDialogOverlay>\n          <AlertDialogContent>\n            <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\n              Edit Task\n            </AlertDialogHeader>\n\n            <AlertDialogBody>\n              <Input\n                value={text}\n                onChange={(e) => setText(e.target.value)}\n                placeholder=\"Edit task\"\n              />\n            </AlertDialogBody>\n\n            <AlertDialogFooter>\n              <Button ref={cancelRef} onClick={() => setIsConfirmationOpen(false)}>\n                Cancel\n              </Button>\n              <Button colorScheme=\"teal\" ml={3} onClick={handleSubmit}>\n                Save\n              </Button>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialogOverlay>\n      </AlertDialog>\n    </>\n  );\n}\n",{"ruleId":"59","severity":1,"message":"60","line":9,"column":3,"nodeType":"61","messageId":"62","endLine":9,"endColumn":11},{"ruleId":"59","severity":1,"message":"63","line":18,"column":18,"nodeType":"61","messageId":"62","endLine":18,"endColumn":27},{"ruleId":"59","severity":1,"message":"64","line":19,"column":24,"nodeType":"61","messageId":"62","endLine":19,"endColumn":29},{"ruleId":"59","severity":1,"message":"65","line":13,"column":13,"nodeType":"61","messageId":"62","endLine":13,"endColumn":17},{"ruleId":"59","severity":1,"message":"65","line":12,"column":13,"nodeType":"61","messageId":"62","endLine":12,"endColumn":17},{"ruleId":"59","severity":1,"message":"65","line":17,"column":13,"nodeType":"61","messageId":"62","endLine":17,"endColumn":17},"no-unused-vars","'useToast' is defined but never used.","Identifier","unusedVar","'reexecute' is assigned a value but never used.","'error' is assigned a value but never used.","'data' is assigned a value but never used."]